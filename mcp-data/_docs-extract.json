{
  "Button": {
    "propsRows": [
      {
        "prop": "`color`",
        "type": "`'primary' | 'secondary' | 'tertiary' | string`",
        "default": "`'primary'`",
        "description": "Background palette or custom colour"
      },
      {
        "prop": "`textColor`",
        "type": "`'primary' | 'secondary' | 'tertiary' | string`",
        "default": "`—`",
        "description": "Label colour override"
      },
      {
        "prop": "`variant`",
        "type": "`'contained' | 'outlined'`",
        "default": "`'contained'`",
        "description": "Visual style"
      },
      {
        "prop": "`size`",
        "type": "`'xs' | 'sm' | 'md' | 'lg' | 'xl' | number | string`",
        "default": "`'md'`",
        "description": "Overall button size or custom CSS length"
      },
      {
        "prop": "`fullWidth`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Stretch to fill parent width"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Establish a clear action hierarchy: use `contained` for the primary action and `outlined` for secondary/tertiary actions. Keep emphasis consistent within a view.",
      "Choose sizes by density: `sm` / `md` for typical forms, `lg` for standout CTAs. Avoid mixing sizes within the same control group.",
      "Prefer theme tokens ( `primary` , `secondary` , `tertiary` ) for automatic contrast. If you set a custom `color` , also set `textColor` to keep contrast accessible.",
      "Use `fullWidth` in narrow or linear layouts (mobile, drawers) where the button should span the container. Otherwise let content define width.",
      "Prefer succinct verb‑first labels. If the action is icon‑only, use `IconButton` and provide an accessible label via `aria-label` .",
      "When combining icons and text, add a small gap (e.g., `` on the icon) for readable spacing.",
      "Reuse styling with `preset` ( `definePreset()` ) rather than duplicating `sx` across instances.",
      "Avoid multiple primary actions per view and reserve destructive styles for destructive operations."
    ],
    "docsUrl": "/components/field/ButtonDemoPage",
    "sourceFile": "docs/src/pages/components/field/ButtonDemoPage.tsx"
  },
  "Checkbox": {
    "propsRows": [
      {
        "prop": "`name`",
        "type": "`string`",
        "default": "`—`",
        "description": "Unique field name"
      },
      {
        "prop": "`label`",
        "type": "`ReactNode`",
        "default": "`—`",
        "description": "Label text or element"
      },
      {
        "prop": "`checked`",
        "type": "`boolean`",
        "default": "`—`",
        "description": "Controlled checked state"
      },
      {
        "prop": "`defaultChecked`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Uncontrolled initial state"
      },
      {
        "prop": "`size`",
        "type": "`'xs' | 'sm' | 'md' | 'lg' | 'xl' | number | string`",
        "default": "`'md'`",
        "description": "Checkbox dimensions"
      },
      {
        "prop": "`disabled`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Disable interaction"
      },
      {
        "prop": "`onChange`",
        "type": "`(checked: boolean, e: ChangeEvent<HTMLInputElement>) => void`",
        "default": "`—`",
        "description": "Change callback"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Use Checkbox for independent booleans. For mutually exclusive choices, prefer `RadioGroup` .",
      "Always provide a clear label. The entire label should be clickable. In forms, set a stable `name` so values submit predictably.",
      "Choose control model deliberately. Use `checked` / `onChange` when the value participates in app state; otherwise `defaultChecked` is fine for local forms.",
      "Keep targets comfortable. Pick `size` tokens or numeric sizes that keep tap areas ≥ 40–48px in dense UIs.",
      "Group with a visible question or caption when multiple checkboxes relate to one concept; don’t rely on proximity alone.",
      "Disabled with context. If a checkbox is disabled, explain why nearby; avoid silently disabling without guidance.",
      "Tokens/presets. Style with theme tokens and `preset` rather than ad‑hoc CSS to keep density and branding consistent."
    ],
    "docsUrl": "/components/field/CheckBoxDemo",
    "sourceFile": "docs/src/pages/components/field/CheckBoxDemo.tsx"
  },
  "DateSelector": {
    "propsRows": [
      {
        "prop": "`value`",
        "type": "`string`",
        "default": "`—`",
        "description": "Controlled ISO date value (YYYY-MM-DD)"
      },
      {
        "prop": "`defaultValue`",
        "type": "`string`",
        "default": "`—`",
        "description": "Initial uncontrolled value"
      },
      {
        "prop": "`onChange`",
        "type": "`(value: string) => void`",
        "default": "`—`",
        "description": "Fires when selection changes"
      },
      {
        "prop": "`name`",
        "type": "`string`",
        "default": "`—`",
        "description": "FormControl field name"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      },
      {
        "prop": "`minDate`",
        "type": "`string`",
        "default": "`'120y ago'`",
        "description": "Earliest selectable date"
      },
      {
        "prop": "`maxDate`",
        "type": "`string`",
        "default": "`'120y ahead'`",
        "description": "Latest selectable date"
      },
      {
        "prop": "`range`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Enable dual start/end selection"
      },
      {
        "prop": "`endValue`",
        "type": "`string`",
        "default": "`—`",
        "description": "Controlled end date when range is true"
      },
      {
        "prop": "`defaultEndValue`",
        "type": "`string`",
        "default": "`—`",
        "description": "Uncontrolled end date default"
      },
      {
        "prop": "`onRangeChange`",
        "type": "`(start: string, end: string) => void`",
        "default": "`—`",
        "description": "Fires when range selection changes"
      },
      {
        "prop": "`compactMode`",
        "type": "`'auto' | 'on' | 'off'`",
        "default": "`'auto'`",
        "description": "Control compact behavior: auto-detect, force on, or disable entirely"
      },
      {
        "prop": "`compactThresholdIn`",
        "type": "`number`",
        "default": "`340`",
        "description": "Width below which compact turns on (only when compactMode=auto)"
      },
      {
        "prop": "`compactThresholdOut`",
        "type": "`number`",
        "default": "`380`",
        "description": "Width above which compact turns off (only when compactMode=auto)"
      }
    ],
    "examples": [],
    "bestPractices": [],
    "docsUrl": "/components/field/DateSelectorDemo",
    "sourceFile": "docs/src/pages/components/field/DateSelectorDemo.tsx"
  },
  "IconButton": {
    "propsRows": [
      {
        "prop": "`variant`",
        "type": "`'contained' | 'outlined'`",
        "default": "`'contained'`",
        "description": "Button style"
      },
      {
        "prop": "`size`",
        "type": "`'xs' | 'sm' | 'md' | 'lg' | 'xl' | number | string`",
        "default": "`'md'`",
        "description": "Overall button dimensions"
      },
      {
        "prop": "`icon`",
        "type": "`string`",
        "default": "`—`",
        "description": "Iconify name"
      },
      {
        "prop": "`svg`",
        "type": "`string | ReactElement`",
        "default": "`—`",
        "description": "Custom SVG content"
      },
      {
        "prop": "`iconColor`",
        "type": "`string`",
        "default": "`—`",
        "description": "Glyph colour override"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Provide an accessible name. Icon‑only buttons must include `aria-label` describing the action (e.g., 'Delete item', 'Play'). Avoid vague labels.",
      "Pick variants by emphasis. Use `contained` for primary/high‑affordance actions and `outlined` for secondary/tertiary actions. Keep colour from theme tokens and avoid unbounded custom colours.",
      "Size for touch. Use token sizes ( `'xs'` … `'xl'` ) or numbers to maintain comfortable targets on mobile.",
      "Toggle semantics. When the button toggles state, add `aria-pressed` to reflect the current state; tooltips are optional and should not replace labels.",
      "Choose `icon` vs `svg` deliberately. Prefer `icon` for Iconify glyphs; use `svg` only for custom/brand artwork. Do not pass both at once.",
      "Keep ripple/motion subtle. Align custom presets with the theme’s motion tokens for a cohesive feel."
    ],
    "docsUrl": "/components/field/IconButtonDemoPage",
    "sourceFile": "docs/src/pages/components/field/IconButtonDemoPage.tsx"
  },
  "Iterator": {
    "propsRows": [
      {
        "prop": "`value`",
        "type": "`number`",
        "default": "`—`",
        "description": "Controlled value"
      },
      {
        "prop": "`defaultValue`",
        "type": "`number`",
        "default": "`0`",
        "description": "Uncontrolled initial value"
      },
      {
        "prop": "`onChange`",
        "type": "`(value: number) => void`",
        "default": "`—`",
        "description": "Change handler"
      },
      {
        "prop": "`name`",
        "type": "`string`",
        "default": "`—`",
        "description": "Form field name"
      },
      {
        "prop": "`min`",
        "type": "`number`",
        "default": "`—`",
        "description": "Minimum value"
      },
      {
        "prop": "`max`",
        "type": "`number`",
        "default": "`—`",
        "description": "Maximum value"
      },
      {
        "prop": "`step`",
        "type": "`number`",
        "default": "`1`",
        "description": "Increment step"
      },
      {
        "prop": "`width`",
        "type": "`number | string`",
        "default": "`'3.5rem'`",
        "description": "Field width"
      },
      {
        "prop": "`disabled`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Disable interaction"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [],
    "docsUrl": "/components/field/IteratorDemo",
    "sourceFile": "docs/src/pages/components/field/IteratorDemo.tsx"
  },
  "MetroSelect": {
    "propsRows": [
      {
        "prop": "`value`",
        "type": "`string | number | (string | number)[]`",
        "default": "`—`",
        "description": "Controlled value (array when multiple)"
      },
      {
        "prop": "`defaultValue`",
        "type": "`string | number | (string | number)[]`",
        "default": "`—`",
        "description": "Uncontrolled initial value (array when multiple)"
      },
      {
        "prop": "`gap`",
        "type": "`number | string`",
        "default": "`4`",
        "description": "Spacing between tiles (theme units if number)"
      },
      {
        "prop": "`multiple`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Enable selecting more than one option"
      },
      {
        "prop": "`onChange`",
        "type": "`(val: Primitive | Primitive[]) => void`",
        "default": "`—`",
        "description": "Change handler (array when multiple)"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      },
      {
        "prop": "`children`",
        "type": "`React.ReactNode`",
        "default": "`—`",
        "description": "MetroSelect.Option elements"
      }
    ],
    "examples": [],
    "bestPractices": [],
    "docsUrl": "/components/field/MetroSelectDemo",
    "sourceFile": "docs/src/pages/components/field/MetroSelectDemo.tsx"
  },
  "Radio": {
    "propsRows": [
      {
        "prop": "`value`",
        "type": "`string`",
        "default": "`—`",
        "description": "Controlled value"
      },
      {
        "prop": "`defaultValue`",
        "type": "`string`",
        "default": "`—`",
        "description": "Uncontrolled initial value"
      },
      {
        "prop": "`name`",
        "type": "`string`",
        "default": "`—`",
        "description": "Field name for forms"
      },
      {
        "prop": "`row`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Horizontal layout"
      },
      {
        "prop": "`size`",
        "type": "`'xs' | 'sm' | 'md' | 'lg' | 'xl' | number | string`",
        "default": "`'md'`",
        "description": "Radio size token or custom CSS measurement"
      },
      {
        "prop": "`spacing`",
        "type": "`number | string`",
        "default": "`—`",
        "description": "Gap between options"
      },
      {
        "prop": "`onChange`",
        "type": "`(val: string) => void`",
        "default": "`—`",
        "description": "Change handler"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Label the group clearly. Provide a visible prompt (e.g., a preceding `Typography` ) and ensure `name` is set so the group behaves as a single form field.",
      "Choose controlled vs uncontrolled deliberately. Use `value` / `onChange` when the selection drives app state; otherwise, `defaultValue` is sufficient.",
      "Align to available space. Use `row` for short option lists in wide layouts; prefer a column for long labels or narrow screens.",
      "Keep targets comfortable. Use token sizes ( `'sm'` .. `'xl'` ) or numeric values to maintain touch targets ≥ 40–48px depending on density.",
      "Avoid nesting interactive content inside labels. Keep each option’s label succinct and non-interactive so keyboard and screen reader navigation remain predictable.",
      "Use presets for visual variants. Capture chip/pill styles with `definePreset` and apply via `preset` so branding and states stay consistent."
    ],
    "docsUrl": "/components/field/RadioGroupDemo",
    "sourceFile": "docs/src/pages/components/field/RadioGroupDemo.tsx"
  },
  "Select": {
    "propsRows": [
      {
        "prop": "`value`",
        "type": "`string | number | (string | number)[]`",
        "default": "`—`",
        "description": "Controlled value"
      },
      {
        "prop": "`initialValue`",
        "type": "`string | number | (string | number)[]`",
        "default": "`—`",
        "description": "Uncontrolled initial value"
      },
      {
        "prop": "`onChange`",
        "type": "`(v: Primitive | Primitive[]) => void`",
        "default": "`—`",
        "description": "Change handler"
      },
      {
        "prop": "`multiple`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Allow multiple values"
      },
      {
        "prop": "`placeholder`",
        "type": "`string`",
        "default": "`'Select…'`",
        "description": "Label when empty"
      },
      {
        "prop": "`size`",
        "type": "`'xs' | 'sm' | 'md' | 'lg' | 'xl' | number | string`",
        "default": "`'md'`",
        "description": "Control height"
      },
      {
        "prop": "`disabled`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Disable interaction"
      },
      {
        "prop": "`name`",
        "type": "`string`",
        "default": "`—`",
        "description": "Form field name"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Choose controlled vs uncontrolled deliberately: use `value` + `onChange` to integrate with app state; use `initialValue` for lightweight forms.",
      "Keep option labels short, distinct, and ordered predictably (alphabetical or by frequency). Avoid duplicating values with different labels.",
      "Use `multiple` only when necessary and present selections clearly. Consider `size` and a minimum width ( `` ) to avoid layout jump.",
      "Prefer `RadioGroup` for a small, mutually exclusive set and `Checkbox` es for a small multi‑select; reserve `Select` for larger sets.",
      "Provide a helpful `placeholder` when no value is selected. Persist value types (string/number) consistently across your app.",
      "When using `FormControl` , set a stable `name` , and avoid mixing primitive types within the same field.",
      "Accessibility: ensure the field has a programmatic label (visible caption or `aria-label` ). Keyboard users should be able to focus and select without a mouse.",
      "Performance: for large option sets, group options logically or load progressively instead of rendering hundreds of nodes at once.",
      "Tokens/presets: size with `size` tokens or numbers and use a `preset` for visual variants so controls adapt to density and branding."
    ],
    "docsUrl": "/components/field/SelectDemo",
    "sourceFile": "docs/src/pages/components/field/SelectDemo.tsx"
  },
  "Slider": {
    "propsRows": [
      {
        "prop": "`value`",
        "type": "`number`",
        "default": "`—`",
        "description": "Controlled value"
      },
      {
        "prop": "`defaultValue`",
        "type": "`number`",
        "default": "`0`",
        "description": "Uncontrolled start value"
      },
      {
        "prop": "`min`",
        "type": "`number`",
        "default": "`0`",
        "description": "Minimum value"
      },
      {
        "prop": "`max`",
        "type": "`number`",
        "default": "`100`",
        "description": "Maximum value"
      },
      {
        "prop": "`step`",
        "type": "`number`",
        "default": "`1`",
        "description": "Step increment"
      },
      {
        "prop": "`presets`",
        "type": "`number[]`",
        "default": "`[]`",
        "description": "Preset snap points"
      },
      {
        "prop": "`snap`",
        "type": "`'none' | 'step' | 'presets'`",
        "default": "`'none'`",
        "description": "Snap behaviour"
      },
      {
        "prop": "`precision`",
        "type": "`number`",
        "default": "`0`",
        "description": "Decimal places"
      },
      {
        "prop": "`showValue`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Display current value"
      },
      {
        "prop": "`showMinMax`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Display min and max labels"
      },
      {
        "prop": "`showTicks`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Show tick marks"
      },
      {
        "prop": "`ticks`",
        "type": "`number[]`",
        "default": "`—`",
        "description": "Custom tick positions"
      },
      {
        "prop": "`size`",
        "type": "`'xs' | 'sm' | 'md' | 'lg' | 'xl' | number | string`",
        "default": "`'md'`",
        "description": "Slider size"
      },
      {
        "prop": "`disabled`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Disable interaction"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Use Slider for continuous ranges. For a handful of discrete options, prefer `RadioGroup` (single‑select) or `Select` .",
      "Declare real bounds. Set `min` / `max` to meaningful limits and show context with `showMinMax` and/or `showValue` .",
      "Snap intentionally. Use `step` or supply `presets` with `snap='presets'` to make targeting easy; adjust `precision` to avoid jittery decimals.",
      "Keyboard precision. Arrow keys adjust by one step; ensure `step` is small enough, and consider pairing with an `Iterator` or numeric input for exact entry.",
      "Ticks with purpose. Only enable `showTicks` when markers aid comprehension; avoid dense, unreadable tick forests.",
      "Size for touch. Use `size` tokens or numbers to keep comfortable thumb and track sizes; avoid tiny controls on mobile.",
      "Controlled effects. When controlled, debounce or batch expensive side‑effects in `onChange` to keep sliding smooth."
    ],
    "docsUrl": "/components/field/SliderDemo",
    "sourceFile": "docs/src/pages/components/field/SliderDemo.tsx"
  },
  "Switch": {
    "propsRows": [
      {
        "prop": "`checked`",
        "type": "`boolean`",
        "default": "`—`",
        "description": "Controlled state"
      },
      {
        "prop": "`defaultChecked`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Uncontrolled initial state"
      },
      {
        "prop": "`onChange`",
        "type": "`(checked: boolean) => void`",
        "default": "`—`",
        "description": "State change handler"
      },
      {
        "prop": "`name`",
        "type": "`string`",
        "default": "`—`",
        "description": "Form field name"
      },
      {
        "prop": "`size`",
        "type": "`'sm' | 'md' | 'lg'`",
        "default": "`'md'`",
        "description": "Switch size"
      },
      {
        "prop": "`disabled`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Disable interaction"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Use Switch for immediate effects. Switch communicates an on/off state that applies instantly; for form submissions that save later, prefer `Checkbox` .",
      "Always pair with a clear label. The label should describe the effect, not the control (e.g., 'Wi‑Fi' rather than 'Enable'). Set a stable `name` when used with `FormControl` .",
      "Choose the control model deliberately. Use `checked` / `onChange` when the state drives app logic; otherwise `defaultChecked` is fine.",
      "Maintain comfortable targets. Pick size tokens ( `'sm'` / `'md'` / `'lg'` ) that keep tap areas ~40–48px in dense UIs.",
      "Accessible semantics. Switch exposes `role=\"switch\"` and `aria-checked` ; do not rely on colour alone to convey state.",
      "Motion and theme. Let default motion and colours come from the theme; keep overrides in presets to stay consistent with the rest of the UI."
    ],
    "docsUrl": "/components/field/SwitchDemo",
    "sourceFile": "docs/src/pages/components/field/SwitchDemo.tsx"
  },
  "AppBar": {
    "propsRows": [],
    "examples": [],
    "bestPractices": [
      "Use a single AppBar per route. It registers with the current `` and automatically offsets content; avoid adding manual top padding/margins.",
      "Prefer tokens and presets. Set `color` to `'primary'` , `'secondary'` , or `'tertiary'` and adjust spacing via the `pad` prop using `theme.spacing` . Use `preset` to standardize variants.",
      "Keep slot content purposeful. Place brand/navigation in `left` and primary actions in `right` . For icon-only controls, provide `aria-label` for accessibility.",
      "Avoid fixed heights. Let padding and typography define height so the AppBar adapts to density, fonts, and breakpoints without magic numbers.",
      "Mind stacking contexts. The AppBar is portalled to `document.body` with a high z-index. Avoid creating local stacking contexts that unintentionally cover it."
    ],
    "docsUrl": "/components/layout/AppBarDemo",
    "sourceFile": "docs/src/pages/components/layout/AppBarDemo.tsx"
  },
  "Box": {
    "propsRows": [
      {
        "prop": "`background`",
        "type": "`string`",
        "default": "`—`",
        "description": "Background colour override. When set to a theme tone (primary/secondary/tertiary), text colour is derived automatically."
      },
      {
        "prop": "`textColor`",
        "type": "`string`",
        "default": "`—`",
        "description": "Explicit text colour"
      },
      {
        "prop": "`pad`",
        "type": "`number | string`",
        "default": "`1`",
        "description": "Container padding. Numbers map via theme.spacing(n); strings pass through (e.g., \"12px\")."
      },
      {
        "prop": "`centerContent`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Center inner content using flexbox"
      },
      {
        "prop": "`fullWidth`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Stretch to 100% width of the parent container"
      },
      {
        "prop": "`alignX`",
        "type": "`'left' | 'right' | 'center'`",
        "default": "`'left'`",
        "description": ""
      },
      {
        "prop": "`compact`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Zero out internal padding (overrides pad)."
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [
      {
        "id": "box-example-1",
        "code": "<Box>\n  <Typography>\n    (no props) — inherits parent background, uses theme text colour\n  </Typography>\n</Box>",
        "lang": "tsx",
        "source": {
          "file": "/home/xbenc/occ/valet/docs/src/pages/components/layout/BoxDemo.tsx"
        },
        "runnable": true
      },
      {
        "id": "box-example-2",
        "code": "<Box\n  background={theme.colors['tertiary']}\n  sx={{\n    border: `2px dashed ${theme.colors['text']}`,\n    padding: theme.spacing(1),\n    borderRadius: 12,\n  }}\n>\n  <Typography>\n    Dashed border, custom radius, padding via <code>sx</code>\n  </Typography>\n</Box>",
        "lang": "tsx",
        "source": {
          "file": "/home/xbenc/occ/valet/docs/src/pages/components/layout/BoxDemo.tsx"
        },
        "runnable": true
      },
      {
        "id": "box-example-3",
        "code": "<Box\n  id=\"hero\"\n  role=\"region\"\n  aria-label=\"Hero banner\"\n  onClick={() => console.log('clicked')}\n  sx={{ border: '1px solid currentColor' }}\n>\n  Content\n</Box>",
        "lang": "tsx",
        "source": {
          "file": "/home/xbenc/occ/valet/docs/src/pages/components/layout/BoxDemo.tsx"
        },
        "runnable": true
      }
    ],
    "bestPractices": [
      "Treat `Box` as the neutral building block: backgrounds, padding, and simple width anchoring. Use `Surface` for page‑level canvas and compose layouts with `Stack` and `Grid` .",
      "Prefer theme tokens ( `primary` , `secondary` , `tertiary` ) to inherit correct contrast automatically. If you pass a custom colour to `background` , explicitly set `textColor` to preserve accessibility.",
      "Reach for `Panel` when you need separation (borders, elevation). Keep `Box` visually minimal so the theme does the heavy lifting.",
      "Use spacing tokens: prefer numeric `pad` values over hardcoded CSS so density matches the spacing contract across components.",
      "Align purposefully: use `alignX` and `fullWidth` for placement; avoid deprecated `centered` .",
      "Reuse styles via `preset` ( `definePreset()` ) instead of duplicating `sx` .",
      "When Box represents a semantic region, add appropriate roles/labels (e.g., `role=\"region\"` , `aria-label` ) via DOM passthrough."
    ],
    "docsUrl": "/components/layout/BoxDemo",
    "sourceFile": "docs/src/pages/components/layout/BoxDemo.tsx"
  },
  "Drawer": {
    "propsRows": [],
    "examples": [],
    "bestPractices": [
      "Choose the right mode. Use `persistent` for primary navigation; use overlay drawers for transient tasks. Prefer `adaptive` so navigation docks in landscape and becomes a toggle in portrait.",
      "Respect close affordances. Provide `onClose` for controlled drawers and keep backdrop/ESC enabled unless there is a strong reason to disable them.",
      "Size with tokens. Set `size` in `rem` or via spacing so density changes keep proportions; avoid content-driven widths that cause reflow thrash.",
      "Don’t manually offset for the AppBar. The drawer reads the current surface offset and adjusts itself (and persistent margins) automatically.",
      "Keep content focused and scrollable. Put navigation and short lists inside; for long collections consider windowing/virtualization and offload heavy work from the drawer."
    ],
    "docsUrl": "/components/layout/DrawerDemo",
    "sourceFile": "docs/src/pages/components/layout/DrawerDemo.tsx"
  },
  "Grid": {
    "propsRows": [
      {
        "prop": "`columns`",
        "type": "`number`",
        "default": "`2`",
        "description": "Number of equal‑width tracks (repeat(n, 1fr))."
      },
      {
        "prop": "`gap`",
        "type": "`number | string`",
        "default": "`1`",
        "description": "Space between cells. Numbers map via theme.spacing(n); strings pass through."
      },
      {
        "prop": "`pad`",
        "type": "`number | string`",
        "default": "`1`",
        "description": "Inner padding for the grid container. Same mapping as gap."
      },
      {
        "prop": "`compact`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Zero out both pad and gap for a tight layout."
      },
      {
        "prop": "`adaptive`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Switch to a single column when the surface is in portrait."
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets via definePreset/preset registry."
      }
    ],
    "examples": [],
    "bestPractices": [
      "Use `Grid` for two‑axis alignment. Prefer `Stack` for linear flows where only one axis matters.",
      "Keep tracks simple: equal‑width `columns` are fast and readable; let children span using `` .",
      "Share spacing with the system. Use numeric `gap` / `pad` so density matches other primitives.",
      "Use `adaptive` to collapse to a single column on portrait/narrow screens instead of ad‑hoc media queries.",
      "Maintain logical DOM order for keyboard and screen readers; don’t rely on grid placement to imply reading order.",
      "Cooperate with `<Surface>` . In adaptive portrait, let content stack and the page scroll naturally; avoid creating nested scroll areas inside cells.",
      "Size items with tokens. Use `theme.spacing` and percent/flex spans rather than fixed pixels so density and breakpoints scale predictably.",
      "Avoid complex selector cascades. Keep item styles shallow and prefer presets for repeatable patterns to maintain performance and readability."
    ],
    "docsUrl": "/components/layout/GridDemo",
    "sourceFile": "docs/src/pages/components/layout/GridDemo.tsx"
  },
  "List": {
    "propsRows": [
      {
        "prop": "`data`",
        "type": "`T[]`",
        "default": "`—`",
        "description": "Items to render."
      },
      {
        "prop": "`getTitle`",
        "type": "`(item: T) => ReactNode`",
        "default": "`—`",
        "description": "Primary content for each row."
      },
      {
        "prop": "`getSubtitle`",
        "type": "`(item: T) => ReactNode`",
        "default": "`—`",
        "description": "Optional secondary line for each row."
      },
      {
        "prop": "`striped`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Apply zebra striping."
      },
      {
        "prop": "`hoverable`",
        "type": "`boolean`",
        "default": "`!striped`",
        "description": "Hover tint. Enabled by default for non‑striped lists."
      },
      {
        "prop": "`reorderable`",
        "type": "`boolean`",
        "default": "`true`",
        "description": "Enable drag‑and‑drop reordering. When false, drag is disabled."
      },
      {
        "prop": "`selectable`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Enable single selection. Click or drag to select the active item."
      },
      {
        "prop": "`selected`",
        "type": "`T | null`",
        "default": "`—`",
        "description": "Controlled selected item (by reference)."
      },
      {
        "prop": "`defaultSelected`",
        "type": "`T | null`",
        "default": "`null`",
        "description": "Uncontrolled initial selected item."
      },
      {
        "prop": "`onSelectionChange`",
        "type": "`(item: T, index: number) => void`",
        "default": "`—`",
        "description": "Fires on selection change (click or drag‑select)."
      },
      {
        "prop": "`onReorder`",
        "type": "`(items: T[]) => void`",
        "default": "`—`",
        "description": "Fires after a drag operation ends with the new order."
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets."
      }
    ],
    "examples": [],
    "bestPractices": [
      "Keep rows scannable. Use `getTitle` for the primary line and a concise `getSubtitle` for secondary details; avoid overloading rows with extra UI.",
      "Choose selection deliberately. Enable `selectable` only when follow‑up actions operate on the active row. Keep selected state controlled if it syncs with app state.",
      "Reorder with care. Turn `reorderable` on when order matters and persist via `onReorder` . Provide immediate visual feedback and avoid conflicting drag handles.",
      "Respect touch/scroll ergonomics. The list locks touch scroll while reordering; avoid nesting it inside other scroll containers to prevent competing gestures.",
      "Tokenize spacing. Use presets and theme spacing rather than per‑row inline styles so density and theming remain consistent across the app.",
      "Large data sets. For very long lists, consider windowing/virtualization and defer heavy per‑row work until visible."
    ],
    "docsUrl": "/components/layout/ListDemoPage",
    "sourceFile": "docs/src/pages/components/layout/ListDemoPage.tsx"
  },
  "Modal": {
    "propsRows": [],
    "examples": [],
    "bestPractices": [
      "Choose the right type: use `variant='dialog'` for neutral flows and `variant='alert'` for destructive or high‑attention confirmations.",
      "Provide a clear `title` and unambiguous action labels (avoid vague “OK”/“Cancel”). Make the primary action visually dominant.",
      "Keep escape hatches accessible. Only combine `disableBackdropClick` and `disableEscapeKeyDown` when the flow truly requires it.",
      "Treat `open` as the single source of truth and wire `onClose` for all dismissal paths (buttons, ESC, backdrop). Return focus to the trigger on close.",
      "Size with intent: prefer `maxWidth` for readability; reserve `fullWidth` for mobile or immersive flows. Let long content scroll inside.",
      "Don’t nest modals. Transition content or sequence steps in a single modal instead of opening another."
    ],
    "docsUrl": "/components/layout/ModalDemo",
    "sourceFile": "docs/src/pages/components/layout/ModalDemo.tsx"
  },
  "Panel": {
    "propsRows": [
      {
        "prop": "`background`",
        "type": "`string`",
        "default": "`—`",
        "description": "Explicit background override"
      },
      {
        "prop": "`centerContent`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Center contents using flexbox"
      },
      {
        "prop": "`alignX`",
        "type": "``",
        "default": "``",
        "description": "Horizontal placement when not fullWidth"
      },
      {
        "prop": "`compact`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Remove default margin and padding"
      },
      {
        "prop": "`fullWidth`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Stretch to 100% width"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      },
      {
        "prop": "`variant`",
        "type": "``",
        "default": "``",
        "description": "Visual style: filled or outlined"
      }
    ],
    "examples": [],
    "bestPractices": [],
    "docsUrl": "/components/layout/Panel",
    "sourceFile": "docs/src/pages/components/layout/Panel.tsx"
  },
  "Stack": {
    "propsRows": [
      {
        "prop": "`direction`",
        "type": "`'row' | 'column'`",
        "default": "`'column'`",
        "description": "Layout direction"
      },
      {
        "prop": "`gap`",
        "type": "`number | string`",
        "default": "`1`",
        "description": "Gap between children"
      },
      {
        "prop": "`wrap`",
        "type": "`boolean`",
        "default": "`false for column, true for row`",
        "description": "Allow children to wrap"
      },
      {
        "prop": "`compact`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Remove margin and padding"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Use numeric `gap` with theme spacing. Prefer small integers (e.g., `1` , `2` ) so density changes propagate via `theme.spacing` .",
      "Let rows wrap by default. `direction='row'` enables wrapping unless you set `wrap=` . This keeps content readable on narrow screens.",
      "Pad the container, not children. Use the `pad` prop for outer breathing room and `gap` for inter-item rhythm; avoid ad‑hoc margins on each child.",
      "Control scroll intentionally. Stacks hide horizontal overflow; when nesting inside constrained parents (e.g., `` ), tune `--valet-stack-ov-y` and `--valet-stack-max-h` to prevent nested scrollbars.",
      "Use `preset` for common layouts. Capture repeated alignment and spacing in a preset to keep markup clean and consistent."
    ],
    "docsUrl": "/components/layout/StackDemo",
    "sourceFile": "docs/src/pages/components/layout/StackDemo.tsx"
  },
  "Tabs": {
    "propsRows": [
      {
        "prop": "`alignX`",
        "type": "``",
        "default": "``",
        "description": "Horizontal alignment of the tab strip (horizontal orientation)."
      },
      {
        "prop": "`orientation`",
        "type": "``",
        "default": "``",
        "description": "Layout direction for the tab strip and panel."
      },
      {
        "prop": "`placement`",
        "type": "``",
        "default": "``",
        "description": "Which side the tab strip sits on relative to the panel."
      },
      {
        "prop": "`active`",
        "type": "`number`",
        "default": "`—`",
        "description": "Controlled index of the active tab."
      },
      {
        "prop": "`defaultActive`",
        "type": "`number`",
        "default": "`0`",
        "description": "Uncontrolled initial active tab index."
      },
      {
        "prop": "`onTabChange`",
        "type": "`(i: number) => void`",
        "default": "`—`",
        "description": "Callback when the active tab changes."
      },
      {
        "prop": "`compact`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Reduce internal spacing density."
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets to the container."
      },
      {
        "prop": "`sx`",
        "type": "`object`",
        "default": "`—`",
        "description": "Inline style overrides (CSS object; supports CSS vars)."
      }
    ],
    "examples": [],
    "bestPractices": [
      "Keep tab labels short and predictable. Prefer 1–2 words; avoid wrapping when possible.",
      "Choose placement by layout: `top` is the default; use vertical placement for dense navigation sidebars.",
      "Reflect app state with controlled tabs ( `active` + `onTabChange` ) when routes or external state should drive selection.",
      "Use `gap` / `pad` to match surrounding density; apply `alignX` to align the strip with nearby content.",
      "For icon‑only tabs, supply `aria-label` and (optionally) a `tooltip` for discoverability.",
      "Keep DOM order logical (Tab → Panel pairs) to preserve keyboard and screen‑reader flow.",
      "Respect overflow ergonomics. When tabs exceed width, valet keeps a single row with horizontal scroll and edge fades; avoid forcing multi‑row tabs, which harms discoverability.",
      "Lean on motion tokens. The active underline should feel crisp; pair durations/easing to `theme.motion` for consistent UX across components.",
      "Route integration. When tabs represent routes, control them from the router and keep URLs canonical so reload/share preserves the active view."
    ],
    "docsUrl": "/components/layout/TabsDemo",
    "sourceFile": "docs/src/pages/components/layout/TabsDemo.tsx"
  },
  "Avatar": {
    "propsRows": [
      {
        "prop": "`src`",
        "type": "`string`",
        "default": "`—`",
        "description": "Image URL override"
      },
      {
        "prop": "`email`",
        "type": "`string`",
        "default": "`—`",
        "description": "Email used for Gravatar lookup"
      },
      {
        "prop": "`size`",
        "type": "`'xs' | 's' | 'm' | 'l' | 'xl'`",
        "default": "`'m'`",
        "description": "Relative size token"
      },
      {
        "prop": "`variant`",
        "type": "`'plain' | 'outline'`",
        "default": "`'plain'`",
        "description": "Visual style variant"
      },
      {
        "prop": "`gravatarDefault`",
        "type": "`string`",
        "default": "`'identicon'`",
        "description": "Fallback style when no avatar exists"
      },
      {
        "prop": "`alt`",
        "type": "`string`",
        "default": "`—`",
        "description": "Image alt text"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Provide meaningful `alt` text when avatars convey identity (e.g., \"Ada Lovelace\"). Use `alt=\"\"` for purely decorative avatars.",
      "Prefer `src` for known assets; use `email` for Gravatar only when appropriate for your privacy posture. Consider caching and strict HTTPS.",
      "Keep sizes consistent across lists. Use size tokens ( `'xs'` .. `'xl'` ) for coherent density and predictable alignment.",
      "Ensure visibility on busy backgrounds. Use `variant='outline'` or place avatars inside a container with sufficient contrast.",
      "Non‑interactive by default. Wrap avatars with a `Button` or link for navigation; avoid attaching click handlers directly without clear affordance."
    ],
    "docsUrl": "/components/primitives/AvatarDemo",
    "sourceFile": "docs/src/pages/components/primitives/AvatarDemo.tsx"
  },
  "Divider": {
    "propsRows": [
      {
        "prop": "`orientation`",
        "type": "`'horizontal' | 'vertical'`",
        "default": "`'horizontal'`",
        "description": "Direction of the line separator."
      },
      {
        "prop": "`lineColor`",
        "type": "`string`",
        "default": "`theme.colors.text`",
        "description": "Explicit colour. By default, Divider uses the text colour that contrasts the page background."
      },
      {
        "prop": "`thickness`",
        "type": "`number | string`",
        "default": "`1`",
        "description": "Line thickness. Numbers map via theme.stroke(n); strings pass through (e.g., \"2px\")."
      },
      {
        "prop": "`length`",
        "type": "`number | string`",
        "default": "`'100%'`",
        "description": "Length along the main axis. Numbers → px; strings pass through (e.g., \"50%\", \"12rem\")."
      },
      {
        "prop": "`pad`",
        "type": "`number | string`",
        "default": "`0`",
        "description": "Outer spacing envelope. Numbers map via theme.spacing(n); strings pass through. Obeys compact."
      },
      {
        "prop": "`compact`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Zero out padding for compact density."
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets."
      }
    ],
    "examples": [],
    "bestPractices": [
      "Use sparingly. Dividers communicate separation; prefer intrinsic spacing (Stack pad/gap) for rhythm and only add lines where hierarchy needs emphasis.",
      "Share spacing tokens. Set `pad` and `thickness` via numeric tokens so density matches other components; avoid hard‑coded pixels.",
      "Orientation follows layout. Use vertical dividers within horizontal stacks and vice versa; keep `length` proportional to nearby content.",
      "Keep contrast subtle. Default line color derives from text; override sparingly to avoid heavy or distracting separators.",
      "Don’t imply semantics. Dividers are visual; use headings and landmarks for document structure, not lines."
    ],
    "docsUrl": "/components/primitives/DividerDemo",
    "sourceFile": "docs/src/pages/components/primitives/DividerDemo.tsx"
  },
  "Icon": {
    "propsRows": [
      {
        "prop": "`icon`",
        "type": "`string`",
        "default": "`—`",
        "description": "Iconify name"
      },
      {
        "prop": "`svg`",
        "type": "`string | ReactElement`",
        "default": "`—`",
        "description": "Custom SVG content"
      },
      {
        "prop": "`size`",
        "type": "`'xs' | 'sm' | 'md' | 'lg' | 'xl' | number | string`",
        "default": "`'md'`",
        "description": "Icon dimensions"
      },
      {
        "prop": "`color`",
        "type": "`string`",
        "default": "`—`",
        "description": "Colour override"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Use semantic sizing. When icons appear inline with text, size in `em` so they scale with the surrounding type ( `size=\"1.25em\"` pairs well with headings).",
      "Accessible naming. Decorative icons should be `aria-hidden` ; icons that convey meaning should have a label via the parent control (e.g., `aria-label` on `IconButton` ).",
      "Prefer theme colours. Let icons inherit current color or set tokens; avoid arbitrary hex values that fight the theme.",
      "Choose `icon` vs `svg` wisely. Use `icon` for Iconify glyphs; provide `svg` for custom/brand artwork only. Do not pass both.",
      "Motion restraint. Avoid animating icons excessively; keep motion consistent with theme motion tokens and user expectations."
    ],
    "docsUrl": "/components/primitives/IconDemoPage",
    "sourceFile": "docs/src/pages/components/primitives/IconDemoPage.tsx"
  },
  "Image": {
    "propsRows": [],
    "examples": [],
    "bestPractices": [
      "Write meaningful `alt` text. Describe the content/purpose; use `alt=\"\"` for purely decorative images to avoid noise for screen readers.",
      "Reserve layout space. Provide `width` and `height` (or a styled container) to prevent cumulative layout shift when images load.",
      "Lazy‑load offscreen media. Enable `lazy` with a tiny `placeholder` for non‑critical images; avoid lazy‑loading above‑the‑fold hero images.",
      "Choose the right `objectFit` . Use `cover` for fills and `contain` for letterboxed media; provide a background colour for pleasant letterboxing.",
      "Prevent drag ghosts. The component disables dragging by default; only enable dragging when there is a genuine use‑case.",
      "Optimize assets. Serve appropriately sized and compressed images; avoid shipping multi‑MB originals for small containers."
    ],
    "docsUrl": "/components/primitives/ImageDemo",
    "sourceFile": "docs/src/pages/components/primitives/ImageDemo.tsx"
  },
  "Progress": {
    "propsRows": [],
    "examples": [],
    "bestPractices": [
      "Choose the right mode. Use `determinate` when you know progress, `indeterminate` for unknown durations, and `buffer` when prefetching or streaming.",
      "Provide context. Pair progress with nearby text (e.g., \"Uploading…\" or \"Step 2 of 3\"). For circular, consider `showLabel` when exact values add clarity.",
      "Don’t spin forever. If indeterminate lasts more than a few seconds, provide a fallback (cancel, retry) or switch to determinate as soon as you can estimate progress.",
      "Respect accessibility. The component sets `role=\"progressbar\"` and ARIA values; you can associate additional text via `aria-label` or `aria-describedby` on the wrapper.",
      "Colour & size with tokens. Use theme colours to convey status (e.g., `error` for failures) and size via tokens/numbers to fit the context.",
      "Don’t block the page. Keep progress close to the affected region and allow unrelated interactions when possible."
    ],
    "docsUrl": "/components/primitives/ProgressDemo",
    "sourceFile": "docs/src/pages/components/primitives/ProgressDemo.tsx"
  },
  "Skeleton": {
    "propsRows": [
      {
        "prop": "`loading`",
        "type": "`boolean`",
        "default": "`true`",
        "description": "Show placeholder while true"
      },
      {
        "prop": "`variant`",
        "type": "`'text' | 'rect' | 'circle'`",
        "default": "`—`",
        "description": "Override inferred placeholder shape"
      },
      {
        "prop": "`icon`",
        "type": "`ReactNode`",
        "default": "`—`",
        "description": "Optional icon shown while loading"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Skeleton the right things. Use Skeleton when the shape/size of incoming content is known; avoid for unknown lists where layout may jump.",
      "Match shapes. Let the component infer `variant` or override it to match the target (text, circle, rect) for believable placeholders.",
      "Prefer quick hide. Hide skeletons as soon as content is ready; uncontrolled usage will auto-hide on `onLoad` / `onError` for common elements.",
      "Keep motion subtle. The pulse is intentionally gentle; avoid stacking many animated placeholders in view.",
      "Provide context. Use brief text nearby (e.g., \"Loading data…\") when appropriate; don’t rely on shimmer alone to communicate state."
    ],
    "docsUrl": "/components/primitives/SkeletonDemo",
    "sourceFile": "docs/src/pages/components/primitives/SkeletonDemo.tsx"
  },
  "Typography": {
    "propsRows": [
      {
        "prop": "`variant`",
        "type": "`'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'body' | 'subtitle' | 'button'`",
        "default": "`'body'`",
        "description": "Typography style preset"
      },
      {
        "prop": "`bold`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Use font-weight 700"
      },
      {
        "prop": "`italic`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Use italic font style"
      },
      {
        "prop": "`centered`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Center-align text and element within flex/grid parents"
      },
      {
        "prop": "`family`",
        "type": "`'heading' | 'body' | 'mono' | 'button'`",
        "default": "`'-'`",
        "description": "Select a theme font family"
      },
      {
        "prop": "`fontFamily`",
        "type": "`string`",
        "default": "`'-'`",
        "description": "Override theme font family"
      },
      {
        "prop": "`fontSize`",
        "type": "`string`",
        "default": "`'-'`",
        "description": "Explicit CSS font-size"
      },
      {
        "prop": "`scale`",
        "type": "`number`",
        "default": "`'-'`",
        "description": "Multiply the final size (autoSize aware)"
      },
      {
        "prop": "`autoSize`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Resize to the current breakpoint"
      },
      {
        "prop": "`color`",
        "type": "`string`",
        "default": "`'-'`",
        "description": "Override text colour"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`'-'`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Match semantics to variants. Heading variants render semantic `h1–h6` elements; keep heading levels hierarchical and avoid skipping from `h1` to `h4` , etc. Prefer a single `h1` per page view.",
      "Use tokens, not pixels. Prefer `autoSize` , `scale` , and theme typography tokens over hard‑coded `fontSize` so type adapts to density and breakpoints.",
      "Choose families from the theme. Use `family` (heading/body/mono/button) or define fonts via `useInitialTheme` ; only use `fontFamily` overrides for special cases.",
      "Maintain contrast. Set `color` via theme tokens or surrounding containers ( `Panel` ) to ensure accessible contrast in light/dark modes.",
      "Don’t fake interactivity. Avoid attaching click handlers to Typography to mimic buttons/links; wrap it in `Button` or `<a>` for correct semantics and focus behaviour.",
      "Whitespace control. Use `whitespace` and `noSelect` for code, labels, and UI text to keep wrapping and selection intentional."
    ],
    "docsUrl": "/components/primitives/TypographyDemoPage",
    "sourceFile": "docs/src/pages/components/primitives/TypographyDemoPage.tsx"
  },
  "Video": {
    "propsRows": [],
    "examples": [],
    "bestPractices": [
      "Provide multiple sources. Include `webm` and `mp4` encodings when possible to maximize browser support.",
      "Use a `poster` and reserve space. Set a poster image and explicit `width` / `height` (or container) to avoid layout shift.",
      "Captions matter. Supply `tracks` for subtitles/captions and allow users to toggle them; the component supports keyboard toggling (C) for the first track.",
      "Autoplay etiquette. Browsers require `muted` for autoplay; keep controls on for accessibility and allow users to pause.",
      "Object fit by context. Use `contain` to show entire frame (letterbox) or `cover` for edge-to-edge hero media.",
      "Performance. Use CDN delivery and sensible `preload` policy; avoid heavy background loops that compete with page interactivity."
    ],
    "docsUrl": "/components/primitives/VideoDemo",
    "sourceFile": "docs/src/pages/components/primitives/VideoDemo.tsx"
  },
  "CodeBlock": {
    "propsRows": [
      {
        "prop": "`code`",
        "type": "`string`",
        "default": "`—`",
        "description": "Source code to render"
      },
      {
        "prop": "`language`",
        "type": "`string`",
        "default": "`'typescript'`",
        "description": "Highlight.js language key"
      },
      {
        "prop": "`ariaLabel`",
        "type": "`string`",
        "default": "`—`",
        "description": "Copy button aria-label"
      },
      {
        "prop": "`title`",
        "type": "`string`",
        "default": "`—`",
        "description": "Copy button tooltip"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Specify the language. Pass a valid Highlight.js key (e.g., 'typescript') so tokens and keywords render correctly.",
      "Use a monospace font and preserve whitespace. Pair with `Typography` `whitespace` controls when embedding code fragments elsewhere.",
      "Keep snippets focused. Avoid very large blocks; extract long examples into files and link out to keep pages readable and fast.",
      "Accessible copy affordance. Provide a descriptive `ariaLabel` (e.g., \"Copy code\") and a `title` tooltip for clarity.",
      "Security hygiene. Never render untrusted code as executable; CodeBlock is purely presentational and should not eval content."
    ],
    "docsUrl": "/components/widgets/CodeBlockDemo",
    "sourceFile": "docs/src/pages/components/widgets/CodeBlockDemo.tsx"
  },
  "Dropzone": {
    "propsRows": [
      {
        "prop": "`accept`",
        "type": "`DropzoneOptions['accept']`",
        "default": "`—`",
        "description": "Allowed file types"
      },
      {
        "prop": "`showPreviews`",
        "type": "`boolean`",
        "default": "`true`",
        "description": "Show preview thumbnails"
      },
      {
        "prop": "`showFileList`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Show icons and names"
      },
      {
        "prop": "`onFilesChange`",
        "type": "`(files: File[]) => void`",
        "default": "`—`",
        "description": "Called when accepted files change"
      },
      {
        "prop": "`maxFiles`",
        "type": "`number`",
        "default": "`—`",
        "description": "Maximum file count"
      },
      {
        "prop": "`multiple`",
        "type": "`boolean`",
        "default": "`true`",
        "description": "Allow multiple file selection"
      },
      {
        "prop": "`fullWidth`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Stretch to fill parent width"
      },
      {
        "prop": "`onDrop`",
        "type": "`DropzoneOptions['onDrop']`",
        "default": "`—`",
        "description": "Low-level drop callback"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Style preset(s)"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Be explicit about file types. Set `accept` to the precise MIME patterns you support and validate on the server; do not rely solely on client hints.",
      "Communicate limits. If using `maxFiles` or size limits, reflect them in the UI copy and error handling; provide clear feedback for rejected files.",
      "Keep previews purposeful. Thumbnails help with images; for other types, prefer a simple file list with clear names and types.",
      "Accessibility first. Ensure the dropzone is focusable and operable via keyboard; users should be able to choose files without drag‑and‑drop.",
      "Progressive uploads. For large files or slow networks, show progress and allow cancel; avoid blocking the UI with synchronous work."
    ],
    "docsUrl": "/components/widgets/DropzoneDemo",
    "sourceFile": "docs/src/pages/components/widgets/DropzoneDemo.tsx"
  },
  "LLMChat": {
    "propsRows": [
      {
        "prop": "`messages`",
        "type": "`ChatMessage[]`",
        "default": "`—`",
        "description": "Conversation history"
      },
      {
        "prop": "`onSend`",
        "type": "`(m: ChatMessage) => void`",
        "default": "`—`",
        "description": "Called when user submits a message"
      },
      {
        "prop": "`userAvatar`",
        "type": "`string`",
        "default": "`—`",
        "description": "URL for user avatar image"
      },
      {
        "prop": "`systemAvatar`",
        "type": "`string`",
        "default": "`—`",
        "description": "URL for assistant avatar image"
      },
      {
        "prop": "`placeholder`",
        "type": "`string`",
        "default": "`'Message…'`",
        "description": "Input placeholder"
      },
      {
        "prop": "`disableInput`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Hide the compose bar"
      },
      {
        "prop": "`constrainHeight`",
        "type": "`boolean`",
        "default": "`true`",
        "description": "Fit within surface height"
      },
      {
        "prop": "`apiKey`",
        "type": "`string`",
        "default": "`—`",
        "description": "Override global API key"
      },
      {
        "prop": "`provider`",
        "type": "`AIProvider`",
        "default": "`—`",
        "description": "Model provider"
      },
      {
        "prop": "`model`",
        "type": "`string`",
        "default": "`—`",
        "description": "Model name"
      },
      {
        "prop": "`onModelChange`",
        "type": "`(m: string) => void`",
        "default": "`—`",
        "description": "Handle model changes"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [],
    "docsUrl": "/components/widgets/LLMChat",
    "sourceFile": "docs/src/pages/components/widgets/LLMChat.tsx"
  },
  "Markdown": {
    "propsRows": [
      {
        "prop": "`data`",
        "type": "`string`",
        "default": "`—`",
        "description": "Markdown source text"
      },
      {
        "prop": "`codeBackground`",
        "type": "`string`",
        "default": "`—`",
        "description": "Override background for fenced code blocks"
      }
    ],
    "examples": [],
    "bestPractices": [],
    "docsUrl": "/components/widgets/MarkdownDemo",
    "sourceFile": "docs/src/pages/components/widgets/MarkdownDemo.tsx"
  },
  "Pagination": {
    "propsRows": [],
    "examples": [],
    "bestPractices": [
      "Keep visible pages small. For large `count` , set `visibleWindow` to 5–7 so navigation remains scannable and the underline motion stays legible.",
      "Keep the active page in view. Leave `autoFollowActive` on when the current page can change outside of user clicks (e.g., programmatic navigation or router updates).",
      "Disable bounds appropriately. At `page === 1` or `page === count` , disable previous/next buttons to reduce noise and convey state.",
      "Sync with URL when relevant. For paged routes, mirror state in the router (query or path) so refresh/share keeps position; keep Pagination controlled via `page` and `onChange` .",
      "Use tokens for rhythm. Rely on theme motion tokens for underline animation and spacing so density or brand changes do not require component edits.",
      "Prefer Pagination for finite sets. For unknown or unbounded results, use windowed lists or infinite scroll with clear load affordances."
    ],
    "docsUrl": "/components/widgets/PaginationDemo",
    "sourceFile": "docs/src/pages/components/widgets/PaginationDemo.tsx"
  },
  "RichChat": {
    "propsRows": [
      {
        "prop": "`messages`",
        "type": "`RichMessage[]`",
        "default": "`—`",
        "description": "Conversation history with JSX content"
      },
      {
        "prop": "`onFormSubmit`",
        "type": "`(value: string, index: number) => void`",
        "default": "`—`",
        "description": "Called when a form message submits"
      },
      {
        "prop": "`onSend`",
        "type": "`(m: RichMessage) => void`",
        "default": "`—`",
        "description": "Called when user sends a message"
      },
      {
        "prop": "`userAvatar`",
        "type": "`string`",
        "default": "`—`",
        "description": "URL for user avatar image"
      },
      {
        "prop": "`systemAvatar`",
        "type": "`string`",
        "default": "`—`",
        "description": "URL for assistant avatar image"
      },
      {
        "prop": "`placeholder`",
        "type": "`string`",
        "default": "`'Message…'`",
        "description": "Input placeholder"
      },
      {
        "prop": "`disableInput`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Hide the compose bar"
      },
      {
        "prop": "`constrainHeight`",
        "type": "`boolean`",
        "default": "`true`",
        "description": "Fit within surface height"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [],
    "docsUrl": "/components/widgets/RichChat",
    "sourceFile": "docs/src/pages/components/widgets/RichChat.tsx"
  },
  "Snackbar": {
    "propsRows": [
      {
        "prop": "`open`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Controlled visibility flag"
      },
      {
        "prop": "`onClose`",
        "type": "``",
        "default": "`—`",
        "description": "Called when fully hidden"
      },
      {
        "prop": "`autoHideDuration`",
        "type": "`number | null`",
        "default": "`4000`",
        "description": "Dismiss after N ms"
      },
      {
        "prop": "`message`",
        "type": "`React.ReactNode`",
        "default": "`—`",
        "description": "Convenience message"
      },
      {
        "prop": "`noStack`",
        "type": "`boolean`",
        "default": "`false`",
        "description": "Disable flex layout"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Keep messages short and specific. Snackbars confirm actions or provide brief status; avoid long instructions or multi‑step interactions.",
      "Provide a single, clear action. If an action is present, use a short verb (e.g., 'Undo'). Avoid multiple competing actions.",
      "Respect motion and timing. Use `autoHideDuration` for transient messages (3–6s typical); longer durations should be deliberate.",
      "Don’t stack excessively. Keep concurrent snackbars minimal; if necessary, queue them and ensure important ones aren’t missed.",
      "Keep focus behavior intact. Snackbars are non‑modal; they should not steal focus. If a button is provided, ensure it is reachable via keyboard.",
      "Style via tokens/presets. Use theme colors for status (e.g., `primary` / `error` ) and consolidate variants with `preset` ."
    ],
    "docsUrl": "/components/widgets/SnackbarDemo",
    "sourceFile": "docs/src/pages/components/widgets/SnackbarDemo.tsx"
  },
  "SpeedDial": {
    "propsRows": [
      {
        "prop": "`icon`",
        "type": "`React.ReactNode`",
        "default": "`—`",
        "description": "Main floating action button icon"
      },
      {
        "prop": "`actions`",
        "type": "`SpeedDialAction[]`",
        "default": "`—`",
        "description": "Array of action buttons"
      },
      {
        "prop": "`direction`",
        "type": "`'up' | 'down' | 'left' | 'right'`",
        "default": "`'up'`",
        "description": "Expansion direction"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Use sparingly. SpeedDial is for a small cluster of high‑value actions (typically 2–5). If you have more, consider a toolbar or menu instead.",
      "Place with intent. Default bottom‑right works well; adjust offsets with spacing tokens to avoid overlapping content or platform UI (e.g., safe areas).",
      "Label actions clearly. Provide short, specific labels; the component exposes them via `title` and keyboard focus when open.",
      "Close on action. After invoking an action, collapse the dial so the UI returns to a stable state and prevents accidental re‑taps.",
      "Pick direction by context. Choose `up` / `left` when anchored to bottom/right edges to prevent overflow. Keep action order predictable.",
      "Motion tokens. Animations use theme motion tokens; keep custom presets aligned for a cohesive feel with the rest of the app."
    ],
    "docsUrl": "/components/widgets/SpeedDialDemo",
    "sourceFile": "docs/src/pages/components/widgets/SpeedDialDemo.tsx"
  },
  "Stepper": {
    "propsRows": [
      {
        "prop": "`steps`",
        "type": "`React.ReactNode[]`",
        "default": "`—`",
        "description": "Labels for each step"
      },
      {
        "prop": "`active`",
        "type": "`number`",
        "default": "`0`",
        "description": "Index of the active step"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Treat Stepper as presentation. It reflects progress; do not use it as the sole navigation control. Provide explicit Next/Back controls and validate each step.",
      "Bind `active` to canonical state. Derive from router or form state rather than local UI assumptions. Clamp to `0…steps.length-1` when updating.",
      "Keep labels short and stable. Prefer 1–2 words. For lengthy flows, consider numeric or icon labels and place detailed titles above the content.",
      "Mind accessibility. Announce progress with text like `Step X of Y` near the Stepper so screen readers have context.",
      "Use tokens/presets to style. Customize radius/stroke via CSS vars and presets rather than per-instance inline styles to keep density and branding coherent.",
      "Keep step count reasonable. If there are many steps or non‑linear paths, a progress bar or checklist may be clearer."
    ],
    "docsUrl": "/components/widgets/StepperDemo",
    "sourceFile": "docs/src/pages/components/widgets/StepperDemo.tsx"
  },
  "Table": {
    "propsRows": [],
    "examples": [],
    "bestPractices": [
      "Keep tables readable: enable `striped` and/or `hoverable` for large datasets, but avoid heavy styling that competes with content.",
      "Constrain height ( `constrainHeight` ) so the body scrolls inside the table instead of the page scrolling in two directions.",
      "Provide an initial sort ( `initialSort` ), align numeric columns to the right, and format dates consistently.",
      "Enable selection only when follow‑up actions operate on selected rows; choose `single` vs `multi` to match the action design.",
      "Keep column count reasonable on narrow screens; prefer fewer, more meaningful columns over many cramped ones. Use succinct headers."
    ],
    "docsUrl": "/components/widgets/TableDemo",
    "sourceFile": "docs/src/pages/components/widgets/TableDemo.tsx"
  },
  "Tooltip": {
    "propsRows": [],
    "examples": [],
    "bestPractices": [
      "Use tooltips for supplemental hints, not essential instructions. The UI should remain usable without hovering.",
      "Ensure the trigger is focusable and labelled. For icon‑only controls, provide `aria-label` on the target.",
      "Keep content concise; avoid interactive controls inside tooltips. Prefer short phrases over sentences.",
      "Prefer `placement='top'` when space allows; adjust placement to avoid clipping and viewport edges.",
      "Use sensible delays. Avoid long `enterDelay` / `leaveDelay` that make tooltips feel sluggish or sticky, especially on touch devices."
    ],
    "docsUrl": "/components/widgets/TooltipDemo",
    "sourceFile": "docs/src/pages/components/widgets/TooltipDemo.tsx"
  },
  "Tree": {
    "propsRows": [
      {
        "prop": "`nodes`",
        "type": "`TreeNode<T>[]`",
        "default": "`—`",
        "description": "Array of tree nodes"
      },
      {
        "prop": "`getLabel`",
        "type": "`(n: T) => ReactNode`",
        "default": "`—`",
        "description": "Return label for a node"
      },
      {
        "prop": "`defaultExpanded`",
        "type": "`string[]`",
        "default": "`[]`",
        "description": "Node ids expanded on mount"
      },
      {
        "prop": "`expanded`",
        "type": "`string[]`",
        "default": "`—`",
        "description": "Controlled expanded node ids"
      },
      {
        "prop": "`onExpandedChange`",
        "type": "`(ids: string[]) => void`",
        "default": "`—`",
        "description": "Handle expand/collapse changes"
      },
      {
        "prop": "`selected`",
        "type": "`string`",
        "default": "`—`",
        "description": "Controlled selected node id"
      },
      {
        "prop": "`defaultSelected`",
        "type": "`string`",
        "default": "`—`",
        "description": "Uncontrolled starting selection"
      },
      {
        "prop": "`onNodeSelect`",
        "type": "`(n: T) => void`",
        "default": "`—`",
        "description": "Called when a node is selected"
      },
      {
        "prop": "`variant`",
        "type": "`'chevron' | 'list' | 'files'`",
        "default": "`'chevron'`",
        "description": "Visual style of branches"
      },
      {
        "prop": "`preset`",
        "type": "`string | string[]`",
        "default": "`—`",
        "description": "Apply style presets"
      }
    ],
    "examples": [],
    "bestPractices": [
      "Use stable ids. Provide deterministic `id` s for nodes so expanded/selected state can be controlled and persisted across renders.",
      "Keep labels compact. Tree rows should be glanceable; favor short labels and use variants ( `list` or `files` ) to convey structure.",
      "Align behavior with expectations. Support Arrow keys, Enter/Space for selection, and Left/Right to collapse/expand; let double‑click toggle when appropriate.",
      "Choose control model. Use `expanded` / `onExpandedChange` and `selected` / `onNodeSelect` when external state or routing must drive the tree; otherwise use defaults.",
      "Avoid over‑nesting. Deep hierarchies are hard to scan; flatten where possible and consider search/filter affordances for large trees.",
      "Tokenized spacing. Use theme spacing for indentation so density and breakpoints scale predictably."
    ],
    "docsUrl": "/components/widgets/TreeDemo",
    "sourceFile": "docs/src/pages/components/widgets/TreeDemo.tsx"
  }
}