{
  "name": "RichChat",
  "category": "widgets",
  "slug": "components/widgets/richchat",
  "summary": "RichChat component",
  "status": "experimental",
  "aliases": [
    "richchat",
    "chat",
    "conversation",
    "thread"
  ],
  "props": [
    {
      "name": "messages",
      "type": "RichMessage[]",
      "required": true
    },
    {
      "name": "onFormSubmit",
      "type": "(value: string, index: number) => void",
      "required": false
    },
    {
      "name": "onSend",
      "type": "(message: RichMessage) => void",
      "required": false
    },
    {
      "name": "userAvatar",
      "type": "string",
      "required": false
    },
    {
      "name": "systemAvatar",
      "type": "string",
      "required": false
    },
    {
      "name": "placeholder",
      "type": "string",
      "required": false,
      "default": "'Messageâ€¦'"
    },
    {
      "name": "disableInput",
      "type": "boolean",
      "required": false,
      "default": "false"
    },
    {
      "name": "constrainHeight",
      "type": "boolean",
      "required": false,
      "default": "true"
    },
    {
      "name": "fontFamily",
      "type": "string",
      "required": false
    },
    {
      "name": "sx",
      "type": "Sx",
      "required": false
    }
  ],
  "domPassthrough": {
    "element": "div",
    "omitted": [
      "onSubmit",
      "style"
    ]
  },
  "cssVars": [],
  "cssPresets": [],
  "events": [
    {
      "name": "onFormSubmit",
      "payloadType": "string"
    },
    {
      "name": "onSend",
      "payloadType": "RichMessage"
    }
  ],
  "actions": [],
  "slots": [],
  "bestPractices": [
    "Keep messages concise and chunked; prefer multiple short assistant turns over monolithic walls of text.",
    "Embed small forms inline when it reduces friction (e.g., date picker, numeric choice); submit via `onFormSubmit`.",
    "Use avatars consistently for roles. Set `userAvatar` / `systemAvatar` to reinforce identity.",
    "Respect scroll context. With `constrainHeight` the thread scrolls locally; otherwise ensure the page layout accommodates tall threads.",
    "Provide optimistic UI for outgoing messages. Animate entries to maintain a conversational rhythm.",
    "Sanitize or gate untrusted JSX. RichChat renders JSX content; ensure sources are trusted."
  ],
  "examples": [
    {
      "id": "richchat-minimal",
      "title": "Minimal thread",
      "code": "(() => {\n  const msgs = [\n    { role: 'assistant', content: 'How can I help you today?' }\n  ];\n  return <RichChat messages={msgs} />;\n})()",
      "lang": "tsx",
      "runnable": true,
      "minimalProps": {
        "messages": []
      }
    },
    {
      "id": "richchat-form",
      "title": "Inline form question",
      "code": "(() => {\n  const DateForm = ({ onSubmit }) => (\n    <Stack direction='row' gap={1}>\n      <DateSelector onChange={(v)=>void 0} value='' />\n      <IconButton icon='carbon:checkmark' aria-label='Confirm' onClick={()=>onSubmit('2025-01-01')} />\n    </Stack>\n  );\n  const [messages, setMessages] = React.useState([\n    { role: 'assistant', content: 'Pick a date', form: ({ onSubmit }) => <DateForm onSubmit={onSubmit} /> }\n  ]);\n  return <RichChat messages={messages} onFormSubmit={(val)=>console.log(val)} />;\n})()",
      "lang": "tsx",
      "runnable": true,
      "minimalProps": {
        "messages": []
      }
    }
  ],
  "sourceFiles": [
    "src/components/widgets/RichChat.tsx"
  ],
  "version": "0.32.0",
  "schemaVersion": "1.6"
}