{
  "name": "Tree",
  "category": "widgets",
  "slug": "components/widgets/tree",
  "summary": "Tree component",
  "status": "experimental",
  "props": [
    {
      "name": "nodes",
      "type": "TreeNode<T>[]",
      "required": true
    },
    {
      "name": "getLabel",
      "type": "(node: T) => React.ReactNode",
      "required": true
    },
    {
      "name": "defaultExpanded",
      "type": "string[]",
      "required": false
    },
    {
      "name": "expanded",
      "type": "string[]",
      "required": false
    },
    {
      "name": "onExpandedChange",
      "type": "(expanded: string[]) => void",
      "required": false
    },
    {
      "name": "selected",
      "type": "string",
      "required": false
    },
    {
      "name": "defaultSelected",
      "type": "string",
      "required": false
    },
    {
      "name": "onNodeSelect",
      "type": "(node: T) => void",
      "required": false
    },
    {
      "name": "variant",
      "type": "'chevron' | 'list' | 'files'",
      "required": false,
      "enumValues": [
        "chevron",
        "list",
        "files"
      ]
    },
    {
      "name": "iconToggleOnly",
      "type": "boolean",
      "required": false
    },
    {
      "name": "sx",
      "type": "Sx",
      "required": false
    }
  ],
  "cssVars": [
    "--valet-focus-width",
    "--valet-focus-offset",
    "--valet-divider-stroke",
    "--valet-tree-stroke",
    "--valet-tree-outline",
    "--valet-tree-offset"
  ],
  "cssPresets": [],
  "events": [
    {
      "name": "onExpandedChange",
      "payloadType": "string[]"
    },
    {
      "name": "onNodeSelect",
      "payloadType": "T"
    }
  ],
  "actions": [],
  "slots": [
    {
      "name": "getLabel"
    }
  ],
  "bestPractices": [
    "Use stable ids. Provide deterministic `id`s for nodes so expanded/selected state can be controlled and persisted across renders.",
    "Keep labels compact. Tree rows should be glanceable; favor short labels and use variants (`list` or `files`) to convey structure.",
    "Align behavior with expectations. Support Arrow keys, Enter/Space for selection, and Left/Right to collapse/expand; let double‑click toggle when appropriate.",
    "Choose control model. Use `expanded` / `onExpandedChange` and `selected` / `onNodeSelect` when external state or routing must drive the tree; otherwise use defaults.",
    "Avoid over‑nesting. Deep hierarchies are hard to scan; flatten where possible and consider search/filter affordances for large trees.",
    "Tokenized spacing. Use theme spacing for indentation so density and breakpoints scale predictably."
  ],
  "examples": [],
  "sourceFiles": [
    "src/components/widgets/Tree.tsx"
  ],
  "version": "0.31.1",
  "schemaVersion": "1.6"
}