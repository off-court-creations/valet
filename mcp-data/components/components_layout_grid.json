{
  "name": "Grid",
  "category": "layout",
  "slug": "components/layout/grid",
  "summary": "Grid component",
  "status": "stable",
  "aliases": [
    "grid"
  ],
  "props": [
    {
      "name": "columns",
      "type": "number",
      "required": false,
      "default": "2"
    },
    {
      "name": "adaptive",
      "type": "boolean",
      "required": false,
      "default": "false"
    },
    {
      "name": "compact",
      "type": "boolean",
      "required": false,
      "default": "false"
    },
    {
      "name": "sx",
      "type": "Sx",
      "required": false
    }
  ],
  "domPassthrough": {
    "element": "div",
    "omitted": [
      "style"
    ]
  },
  "cssVars": [
    "--valet-panel-ov-y",
    "--valet-panel-max-h",
    "--valet-stack-ov-y",
    "--valet-stack-max-h",
    "--valet-box-max-h"
  ],
  "cssPresets": [],
  "events": [],
  "actions": [],
  "slots": [],
  "bestPractices": [
    "Use Grid for two‑dimensional layouts like dashboards and galleries; keep rows and columns responsive.",
    "Constrain item overflow and prefer consistent gaps; avoid nested scroll regions unless intentional.",
    "Treat tabular data with `Table`; reserve Grid for cards and visual groups.",
    "Use tokens and presets for spacing and breakpoints; avoid hard‑coding pixel values.",
    "Keep density readable: don’t cram too many items per row on narrow screens.",
    "Use `Stack` for simple one‑dimensional layouts; Grid for when both axes matter.",
    "Mind a11y ordering: visual reflow should not break logical reading order.",
    "Test at common breakpoints to ensure content doesn’t clip or overlap."
  ],
  "examples": [
    {
      "id": "grid-2col",
      "title": "Two columns",
      "code": "<Grid columns={2} gap={1}>\n  <Box fullWidth centerContent preset='glassHolder'><Typography>A</Typography></Box>\n  <Box fullWidth centerContent preset='glassHolder'><Typography>B</Typography></Box>\n</Grid>",
      "lang": "tsx",
      "runnable": true,
      "minimalProps": {}
    },
    {
      "id": "grid-4col",
      "title": "Four columns",
      "code": "<Grid columns={4} gap={1}>\n  {Array.from({ length: 8 }, (_, i) => i + 1).map(n => (\n    <Box key={n} fullWidth centerContent preset='fancyHolder'><Typography>{n}</Typography></Box>\n  ))}\n</Grid>",
      "lang": "tsx",
      "runnable": true,
      "minimalProps": {}
    },
    {
      "id": "grid-adaptive",
      "title": "Adaptive (portrait collapses)",
      "code": "<Grid columns={4} gap={1} adaptive>\n  {Array.from({ length: 8 }, (_, i) => i + 1).map(n => (\n    <Box key={n} fullWidth centerContent preset='gradientHolder'><Typography>{n}</Typography></Box>\n  ))}\n</Grid>",
      "lang": "tsx",
      "runnable": true,
      "minimalProps": {}
    },
    {
      "id": "grid-nested",
      "title": "Nested grids",
      "code": "<Grid columns={2} gap={1}>\n  <Grid columns={2} gap={1}>\n    <Box fullWidth centerContent><Typography>A1</Typography></Box>\n    <Box fullWidth centerContent><Typography>A2</Typography></Box>\n    <Box fullWidth centerContent><Typography>A3</Typography></Box>\n    <Box fullWidth centerContent><Typography>A4</Typography></Box>\n  </Grid>\n  <Grid columns={3} gap={0.5}>\n    {['B1','B2','B3','B4','B5','B6'].map(n => (\n      <Box key={n} fullWidth centerContent><Typography>{n}</Typography></Box>\n    ))}\n  </Grid>\n</Grid>",
      "lang": "tsx",
      "runnable": true,
      "minimalProps": {}
    }
  ],
  "sourceFiles": [
    "src/components/layout/Grid.tsx"
  ],
  "version": "0.32.0",
  "schemaVersion": "1.6"
}