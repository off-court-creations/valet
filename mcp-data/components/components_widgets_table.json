{
  "name": "Table",
  "category": "widgets",
  "slug": "components/widgets/table",
  "summary": "Table component",
  "status": "stable",
  "aliases": [
    "table",
    "datagrid",
    "data-grid"
  ],
  "props": [
    {
      "name": "data",
      "type": "T[]",
      "required": true
    },
    {
      "name": "columns",
      "type": "TableColumn<T>[]",
      "required": true
    },
    {
      "name": "striped",
      "type": "boolean",
      "required": false
    },
    {
      "name": "hoverable",
      "type": "boolean",
      "required": false
    },
    {
      "name": "dividers",
      "type": "boolean",
      "required": false
    },
    {
      "name": "selectable",
      "type": "'single' | 'multi' | undefined",
      "required": false,
      "enumValues": [
        "single",
        "multi"
      ]
    },
    {
      "name": "initialSort",
      "type": "{ index: number; desc?: boolean }",
      "required": false
    },
    {
      "name": "onSortChange",
      "type": "(index: number, desc: boolean) => void",
      "required": false
    },
    {
      "name": "onSelectionChange",
      "type": "(selected: T[]) => void",
      "required": false
    },
    {
      "name": "constrainHeight",
      "type": "boolean",
      "required": false
    },
    {
      "name": "sx",
      "type": "Sx",
      "required": false
    }
  ],
  "domPassthrough": {
    "element": "table",
    "omitted": [
      "children",
      "style"
    ]
  },
  "cssVars": [
    "--valet-divider-stroke",
    "--valet-underline-width",
    "--valet-bg",
    "--valet-table-underline"
  ],
  "cssPresets": [],
  "events": [
    {
      "name": "onSortChange",
      "payloadType": "number"
    },
    {
      "name": "onSelectionChange",
      "payloadType": "T[]"
    }
  ],
  "actions": [],
  "slots": [],
  "bestPractices": [
    "Keep tables readable: enable `striped` and/or `hoverable` for large datasets, but avoid heavy styling that competes with content.",
    "Constrain height (`constrainHeight`) so the body scrolls inside the table instead of the page scrolling in two directions.",
    "Provide an initial sort (`initialSort`), align numeric columns to the right, and format dates consistently.",
    "Enable selection only when follow‑up actions operate on selected rows; choose `single` vs `multi` to match the action design.",
    "Keep column count reasonable on narrow screens; prefer fewer, more meaningful columns over many cramped ones. Use succinct headers."
  ],
  "examples": [
    {
      "id": "table-basic",
      "title": "Basic striped table",
      "code": "(() => {\n  const columns = [\n    { header: 'ID', accessor: 'id', align: 'right' },\n    { header: 'Name', accessor: 'name' },\n    { header: 'City', accessor: 'city' },\n  ];\n  const data = [\n    { id: 1, name: 'Ada Lovelace', city: 'London' },\n    { id: 2, name: 'Alan Turing', city: 'Manchester' },\n    { id: 3, name: 'Grace Hopper', city: 'New York' },\n  ];\n  return (<Panel fullWidth><Table data={data} columns={columns} striped hoverable constrainHeight /></Panel>);\n})()",
      "lang": "tsx",
      "runnable": true,
      "minimalProps": {
        "data": [],
        "columns": []
      }
    },
    {
      "id": "table-selectable",
      "title": "Single‑select with initial sort",
      "code": "(() => {\n  const columns = [\n    { header: 'ID', accessor: 'id', align: 'right', sortable: true },\n    { header: 'Name', accessor: 'name', sortable: true },\n    { header: 'Age', accessor: 'age', align: 'right', sortable: true },\n  ];\n  const data = [\n    { id: 1, name: 'Katherine Johnson', age: 41 },\n    { id: 2, name: 'Tim Berners‑Lee', age: 35 },\n    { id: 3, name: 'Linus Torvalds', age: 29 },\n  ];\n  const Demo = () => {\n    const [selected, setSelected] = React.useState([]);\n    return (<Stack>\n      <Panel fullWidth>\n        <Table data={data} columns={columns} selectable='single' initialSort={{ index: 0 }} onSelectionChange={setSelected} />\n      </Panel>\n      <Typography variant='subtitle'>Selected: {selected.map((r) => r.id).join(', ') || '—'}</Typography>\n    </Stack>);\n  };\n  return <Demo />;\n})()",
      "lang": "tsx",
      "runnable": true,
      "minimalProps": {
        "data": [],
        "columns": []
      }
    }
  ],
  "sourceFiles": [
    "src/components/widgets/Table.tsx"
  ],
  "version": "0.32.0",
  "schemaVersion": "1.6"
}