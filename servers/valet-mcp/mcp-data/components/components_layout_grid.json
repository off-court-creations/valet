{
  "name": "Grid",
  "category": "layout",
  "slug": "components/layout/grid",
  "summary": "Grid component",
  "aliases": [
    "grid"
  ],
  "props": [
    {
      "name": "columns",
      "type": "number",
      "required": true,
      "default": "2",
      "description": "Number of equal‑width tracks (repeat(n, 1fr))."
    },
    {
      "name": "adaptive",
      "type": "boolean",
      "required": true,
      "default": "false",
      "description": "Switch to a single column when the surface is in portrait."
    },
    {
      "name": "compact",
      "type": "boolean",
      "required": true,
      "default": "false",
      "description": "Zero out both pad and gap for a tight layout."
    },
    {
      "name": "sx",
      "type": "Sx",
      "required": true
    },
    {
      "name": "gap",
      "type": "number | string",
      "required": false,
      "default": "1",
      "description": "Space between cells. Numbers map via theme.spacing(n); strings pass through."
    },
    {
      "name": "pad",
      "type": "number | string",
      "required": false,
      "default": "1",
      "description": "Inner padding for the grid container. Same mapping as gap."
    },
    {
      "name": "preset",
      "type": "string | string[]",
      "required": false,
      "default": "—",
      "description": "Apply style presets via definePreset/preset registry."
    }
  ],
  "cssVars": [
    "--valet-panel-ov-y",
    "--valet-panel-max-h",
    "--valet-stack-ov-y",
    "--valet-stack-max-h",
    "--valet-box-max-h"
  ],
  "cssPresets": [],
  "events": [],
  "actions": [],
  "slots": [],
  "bestPractices": [
    "Use `Grid` for two‑axis alignment. Prefer `Stack` for linear flows where only one axis matters.",
    "Keep tracks simple: equal‑width `columns` are fast and readable; let children span using `` .",
    "Share spacing with the system. Use numeric `gap` / `pad` so density matches other primitives.",
    "Use `adaptive` to collapse to a single column on portrait/narrow screens instead of ad‑hoc media queries.",
    "Maintain logical DOM order for keyboard and screen readers; don’t rely on grid placement to imply reading order.",
    "Cooperate with `<Surface>` . In adaptive portrait, let content stack and the page scroll naturally; avoid creating nested scroll areas inside cells.",
    "Size items with tokens. Use `theme.spacing` and percent/flex spans rather than fixed pixels so density and breakpoints scale predictably.",
    "Avoid complex selector cascades. Keep item styles shallow and prefer presets for repeatable patterns to maintain performance and readability."
  ],
  "bestPracticeSlugs": [
    "use-for-twoaxis-alignment-prefer-for-linear-flows-where-only-one-axis",
    "keep-tracks-simple-equalwidth-are-fast-and-readable-let-children-span",
    "share-spacing-with-the-system-use-numeric-so-density-matches-other",
    "use-to-collapse-to-a-single-column-on-portraitnarrow-screens-instead-of",
    "maintain-logical-dom-order-for-keyboard-and-screen-readers-dont-rely-on",
    "cooperate-with-in-adaptive-portrait-let-content-stack-and-the-page",
    "size-items-with-tokens-use-and-percentflex-spans-rather-than-fixed",
    "avoid-complex-selector-cascades-keep-item-styles-shallow-and-prefer"
  ],
  "examples": [],
  "docsUrl": "/components/layout/GridDemo",
  "sourceFiles": [
    "src/components/layout/Grid.tsx",
    "docs/src/pages/components/layout/GridDemo.tsx"
  ],
  "version": "0.30.6",
  "schemaVersion": "1.3"
}