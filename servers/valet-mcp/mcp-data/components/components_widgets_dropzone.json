{
  "name": "Dropzone",
  "category": "widgets",
  "slug": "components/widgets/dropzone",
  "summary": "Dropzone component",
  "aliases": [
    "dropzone",
    "upload",
    "uploader"
  ],
  "props": [
    {
      "name": "accept",
      "type": "DropzoneOptions['accept']",
      "required": true,
      "default": "—",
      "description": "Allowed file types"
    },
    {
      "name": "showPreviews",
      "type": "boolean",
      "required": true,
      "default": "true",
      "description": "Show preview thumbnails"
    },
    {
      "name": "showFileList",
      "type": "boolean",
      "required": true,
      "default": "false",
      "description": "Show icons and names"
    },
    {
      "name": "onFilesChange",
      "type": "(files: File[]) => void",
      "required": true,
      "default": "—",
      "description": "Called when accepted files change"
    },
    {
      "name": "maxFiles",
      "type": "number",
      "required": true,
      "default": "—",
      "description": "Maximum file count"
    },
    {
      "name": "multiple",
      "type": "boolean",
      "required": true,
      "default": "true",
      "description": "Allow multiple file selection"
    },
    {
      "name": "onDrop",
      "type": "DropzoneOptions['onDrop']",
      "required": true,
      "default": "—",
      "description": "Low-level drop callback"
    },
    {
      "name": "fullWidth",
      "type": "boolean",
      "required": true,
      "default": "false",
      "description": "Stretch to fill parent width"
    },
    {
      "name": "sx",
      "type": "Sx",
      "required": true
    },
    {
      "name": "preset",
      "type": "string | string[]",
      "required": false,
      "default": "—",
      "description": "Style preset(s)"
    }
  ],
  "cssVars": [],
  "cssPresets": [],
  "events": [
    {
      "name": "onFilesChange",
      "payloadType": "File[]"
    }
  ],
  "actions": [],
  "slots": [],
  "bestPractices": [
    "Be explicit about file types. Set `accept` to the precise MIME patterns you support and validate on the server; do not rely solely on client hints.",
    "Communicate limits. If using `maxFiles` or size limits, reflect them in the UI copy and error handling; provide clear feedback for rejected files.",
    "Keep previews purposeful. Thumbnails help with images; for other types, prefer a simple file list with clear names and types.",
    "Accessibility first. Ensure the dropzone is focusable and operable via keyboard; users should be able to choose files without drag‑and‑drop.",
    "Progressive uploads. For large files or slow networks, show progress and allow cancel; avoid blocking the UI with synchronous work."
  ],
  "bestPracticeSlugs": [
    "be-explicit-about-file-types-set-to-the-precise-mime-patterns-you",
    "communicate-limits-if-using-or-size-limits-reflect-them-in-the-ui-copy",
    "keep-previews-purposeful-thumbnails-help-with-images-for-other-types",
    "accessibility-first-ensure-the-dropzone-is-focusable-and-operable-via",
    "progressive-uploads-for-large-files-or-slow-networks-show-progress-and"
  ],
  "examples": [],
  "docsUrl": "/components/widgets/DropzoneDemo",
  "sourceFiles": [
    "src/components/widgets/Dropzone.tsx",
    "docs/src/pages/components/widgets/DropzoneDemo.tsx"
  ],
  "version": "0.30.6",
  "schemaVersion": "1.3"
}