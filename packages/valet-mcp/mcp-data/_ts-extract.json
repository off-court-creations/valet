{
  "Button": {
    "name": "Button",
    "category": "fields",
    "slug": "components/fields/button",
    "summary": "Button component",
    "props": [
      {
        "name": "color",
        "type": "ButtonToken | string",
        "required": false
      },
      {
        "name": "textColor",
        "type": "ButtonToken | string",
        "required": false
      },
      {
        "name": "variant",
        "type": "ButtonVariant",
        "required": false,
        "default": "'contained'"
      },
      {
        "name": "size",
        "type": "ButtonSize | number | string",
        "required": false,
        "default": "'md'"
      },
      {
        "name": "fullWidth",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-bg",
      "--valet-text-color"
    ],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/fields/Button.tsx"
    ]
  },
  "Checkbox": {
    "name": "Checkbox",
    "category": "fields",
    "slug": "components/fields/checkbox",
    "summary": "Checkbox component",
    "props": [
      {
        "name": "checked",
        "type": "boolean",
        "required": false
      },
      {
        "name": "defaultChecked",
        "type": "boolean",
        "required": false
      },
      {
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "name": "label",
        "type": "ReactNode",
        "required": false
      },
      {
        "name": "size",
        "type": "CheckboxSize | number | string",
        "required": false
      },
      {
        "name": "onChange",
        "type": "(checked: boolean, event: ChangeEvent<HTMLInputElement>) => void",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-checkbox-radius",
      "--valet-checkbox-stroke",
      "--valet-checkbox-inset"
    ],
    "cssPresets": [],
    "events": [
      {
        "name": "onChange",
        "payloadType": "boolean"
      }
    ],
    "actions": [],
    "slots": [
      {
        "name": "label"
      }
    ],
    "sourceFiles": [
      "src/components/fields/Checkbox.tsx"
    ]
  },
  "DateSelector": {
    "name": "DateSelector",
    "category": "fields",
    "slug": "components/fields/dateselector",
    "summary": "DateSelector component",
    "props": [
      {
        "name": "value",
        "type": "string",
        "required": false
      },
      {
        "name": "defaultValue",
        "type": "string",
        "required": false
      },
      {
        "name": "onChange",
        "type": "(value: string) => void",
        "required": false
      },
      {
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "name": "minDate",
        "type": "string",
        "required": false
      },
      {
        "name": "maxDate",
        "type": "string",
        "required": false
      },
      {
        "name": "range",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "endValue",
        "type": "string",
        "required": false
      },
      {
        "name": "defaultEndValue",
        "type": "string",
        "required": false
      },
      {
        "name": "onRangeChange",
        "type": "(start: string, end: string) => void",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      },
      {
        "name": "compactMode",
        "type": "'auto' | 'on' | 'off'",
        "required": false,
        "default": "'auto'",
        "enumValues": [
          "auto",
          "on",
          "off"
        ]
      },
      {
        "name": "compactThresholdIn",
        "type": "number",
        "required": false,
        "default": "340"
      },
      {
        "name": "compactThresholdOut",
        "type": "number",
        "required": false,
        "default": "380"
      }
    ],
    "cssVars": [
      "--valet-date-radius",
      "--valet-date-cell-radius",
      "--valet-text-color"
    ],
    "cssPresets": [],
    "events": [
      {
        "name": "onChange",
        "payloadType": "string"
      },
      {
        "name": "onRangeChange",
        "payloadType": "string"
      }
    ],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/fields/DateSelector.tsx"
    ]
  },
  "FormControl": {
    "name": "FormControl",
    "category": "fields",
    "slug": "components/fields/formcontrol",
    "summary": "FormControl component",
    "props": [
      {
        "name": "useStore",
        "type": "UseBoundStore<StoreApi<FormStore<T>>>",
        "required": true
      },
      {
        "name": "onSubmitValues",
        "type": "(values: T, event: React.FormEvent<HTMLFormElement>) => void",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [
      {
        "name": "onSubmitValues",
        "payloadType": "T"
      }
    ],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/fields/FormControl.tsx"
    ]
  },
  "IconButton": {
    "name": "IconButton",
    "category": "fields",
    "slug": "components/fields/iconbutton",
    "summary": "IconButton component",
    "props": [
      {
        "name": "variant",
        "type": "IconButtonVariant",
        "required": false,
        "default": "'contained'"
      },
      {
        "name": "size",
        "type": "IconButtonSize | number | string",
        "required": false,
        "default": "'md'"
      },
      {
        "name": "icon",
        "type": "string",
        "required": false
      },
      {
        "name": "svg",
        "type": "string | ReactElement<SVGProps<SVGSVGElement>>",
        "required": false
      },
      {
        "name": "iconColor",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [
      {
        "name": "svg"
      }
    ],
    "sourceFiles": [
      "src/components/fields/IconButton.tsx"
    ]
  },
  "Iterator": {
    "name": "Iterator",
    "category": "fields",
    "slug": "components/fields/iterator",
    "summary": "Iterator component",
    "props": [
      {
        "name": "value",
        "type": "number",
        "required": false
      },
      {
        "name": "defaultValue",
        "type": "number",
        "required": false
      },
      {
        "name": "onChange",
        "type": "(value: number) => void",
        "required": false
      },
      {
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "name": "min",
        "type": "number",
        "required": false
      },
      {
        "name": "max",
        "type": "number",
        "required": false
      },
      {
        "name": "step",
        "type": "number",
        "required": false
      },
      {
        "name": "width",
        "type": "number | string",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [
      {
        "name": "onChange",
        "payloadType": "number"
      }
    ],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/fields/Iterator.tsx"
    ]
  },
  "MetroSelect": {
    "name": "MetroSelect",
    "category": "fields",
    "slug": "components/fields/metroselect",
    "summary": "MetroSelect component",
    "props": [
      {
        "name": "value",
        "type": "Primitive | Primitive[]",
        "required": false
      },
      {
        "name": "defaultValue",
        "type": "Primitive | Primitive[]",
        "required": false
      },
      {
        "name": "gap",
        "type": "number | string",
        "required": false,
        "default": "0"
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "onChange",
        "type": "(v: Primitive | Primitive[]) => void",
        "required": false
      },
      {
        "name": "children",
        "type": "React.ReactNode",
        "required": true
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-text-color"
    ],
    "cssPresets": [],
    "events": [
      {
        "name": "onChange",
        "payloadType": "Primitive | Primitive[]"
      }
    ],
    "actions": [],
    "slots": [
      {
        "name": "children"
      }
    ],
    "sourceFiles": [
      "src/components/fields/MetroSelect.tsx"
    ]
  },
  "Radio": {
    "name": "Radio",
    "category": "fields",
    "slug": "components/fields/radio",
    "summary": "Radio component",
    "props": [
      {
        "name": "value",
        "type": "string",
        "required": true
      },
      {
        "name": "label",
        "type": "string",
        "required": false
      },
      {
        "name": "size",
        "type": "RadioSize | number | string",
        "required": false
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [
      {
        "name": "children"
      }
    ],
    "sourceFiles": [
      "src/components/fields/RadioGroup.tsx"
    ]
  },
  "Select": {
    "name": "Select",
    "category": "fields",
    "slug": "components/fields/select",
    "summary": "Select component",
    "props": [
      {
        "name": "value",
        "type": "Primitive | Primitive[]",
        "required": false
      },
      {
        "name": "initialValue",
        "type": "Primitive | Primitive[]",
        "required": false
      },
      {
        "name": "onChange",
        "type": "(v: Primitive | Primitive[]) => void",
        "required": false
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false
      },
      {
        "name": "size",
        "type": "SelectSize | number | string",
        "required": false
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false
      },
      {
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "name": "children",
        "type": "React.ReactNode",
        "required": true
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-border",
      "--valet-bg",
      "--valet-text-color"
    ],
    "cssPresets": [],
    "events": [
      {
        "name": "onChange",
        "payloadType": "Primitive | Primitive[]"
      }
    ],
    "actions": [],
    "slots": [
      {
        "name": "children"
      }
    ],
    "sourceFiles": [
      "src/components/fields/Select.tsx"
    ]
  },
  "Slider": {
    "name": "Slider",
    "category": "fields",
    "slug": "components/fields/slider",
    "summary": "Slider component",
    "props": [
      {
        "name": "value",
        "type": "number",
        "required": false
      },
      {
        "name": "defaultValue",
        "type": "number",
        "required": false
      },
      {
        "name": "onChange",
        "type": "(value: number) => void",
        "required": false
      },
      {
        "name": "min",
        "type": "number",
        "required": false
      },
      {
        "name": "max",
        "type": "number",
        "required": false
      },
      {
        "name": "step",
        "type": "number",
        "required": false
      },
      {
        "name": "presets",
        "type": "number[]",
        "required": false
      },
      {
        "name": "snap",
        "type": "SnapMode",
        "required": false
      },
      {
        "name": "precision",
        "type": "number",
        "required": false
      },
      {
        "name": "showValue",
        "type": "boolean",
        "required": false
      },
      {
        "name": "showMinMax",
        "type": "boolean",
        "required": false
      },
      {
        "name": "showTicks",
        "type": "boolean",
        "required": false
      },
      {
        "name": "ticks",
        "type": "number[]",
        "required": false
      },
      {
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "name": "size",
        "type": "SliderSize | number | string",
        "required": false
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-bg",
      "--valet-text-color"
    ],
    "cssPresets": [],
    "events": [
      {
        "name": "onChange",
        "payloadType": "number"
      }
    ],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/fields/Slider.tsx"
    ]
  },
  "Switch": {
    "name": "Switch",
    "category": "fields",
    "slug": "components/fields/switch",
    "summary": "Switch component",
    "props": [
      {
        "name": "checked",
        "type": "boolean",
        "required": false
      },
      {
        "name": "defaultChecked",
        "type": "boolean",
        "required": false
      },
      {
        "name": "onChange",
        "type": "(checked: boolean) => void",
        "required": false
      },
      {
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "name": "size",
        "type": "SwitchSize",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-switch-outline",
      "--valet-switch-offset",
      "--valet-switch-pad"
    ],
    "cssPresets": [],
    "events": [
      {
        "name": "onChange",
        "payloadType": "boolean"
      }
    ],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/fields/Switch.tsx"
    ]
  },
  "TextField": {
    "name": "TextField",
    "category": "fields",
    "slug": "components/fields/textfield",
    "summary": "TextField component",
    "props": [
      {
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "name": "label",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "helperText",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "error",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "fullWidth",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "fontFamily",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx | undefined",
        "required": false
      },
      {
        "name": "preset",
        "type": "string | string[] | undefined",
        "required": false
      },
      {
        "name": "accept",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "alt",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "autoComplete",
        "type": "HTMLInputAutoCompleteAttribute | undefined | string | undefined",
        "required": false
      },
      {
        "name": "capture",
        "type": "boolean | \"user\" | \"environment\" | undefined",
        "required": false
      },
      {
        "name": "checked",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "disabled",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "form",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "formAction",
        "type": "string | ((formData: FormData) => void | Promise<void>) | undefined",
        "required": false
      },
      {
        "name": "formEncType",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "formMethod",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "formNoValidate",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "formTarget",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "height",
        "type": "string | number | undefined",
        "required": false
      },
      {
        "name": "list",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "max",
        "type": "string | number | undefined",
        "required": false
      },
      {
        "name": "maxLength",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "min",
        "type": "string | number | undefined",
        "required": false
      },
      {
        "name": "minLength",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "multiple",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "pattern",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "placeholder",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "readOnly",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "required",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "size",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "src",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "step",
        "type": "string | number | undefined",
        "required": false
      },
      {
        "name": "type",
        "type": "HTMLInputTypeAttribute | undefined",
        "required": false
      },
      {
        "name": "value",
        "type": "string | number | readonly string[] | undefined",
        "required": false
      },
      {
        "name": "width",
        "type": "string | number | undefined",
        "required": false
      },
      {
        "name": "onChange",
        "type": "ChangeEventHandler<HTMLInputElement> | undefined | ChangeEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "defaultChecked",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "defaultValue",
        "type": "string | number | readonly string[] | undefined",
        "required": false
      },
      {
        "name": "suppressContentEditableWarning",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "suppressHydrationWarning",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "accessKey",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "autoCapitalize",
        "type": "(string & {}) | \"off\" | \"on\" | \"none\" | \"sentences\" | \"words\" | \"characters\" | undefined",
        "required": false
      },
      {
        "name": "autoFocus",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "className",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "contentEditable",
        "type": "Booleanish | \"inherit\" | \"plaintext-only\" | undefined",
        "required": false
      },
      {
        "name": "contextMenu",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "dir",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "draggable",
        "type": "Booleanish | undefined",
        "required": false
      },
      {
        "name": "enterKeyHint",
        "type": "\"search\" | \"enter\" | \"done\" | \"go\" | \"next\" | \"previous\" | \"send\" | undefined",
        "required": false
      },
      {
        "name": "hidden",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "id",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "lang",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "nonce",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "slot",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "spellCheck",
        "type": "Booleanish | undefined",
        "required": false
      },
      {
        "name": "style",
        "type": "CSSProperties | undefined",
        "required": false
      },
      {
        "name": "tabIndex",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "title",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "translate",
        "type": "\"yes\" | \"no\" | undefined",
        "required": false
      },
      {
        "name": "radioGroup",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "role",
        "type": "AriaRole | undefined",
        "required": false
      },
      {
        "name": "about",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "content",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "datatype",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "inlist",
        "type": "any",
        "required": false
      },
      {
        "name": "prefix",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "property",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "rel",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "resource",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "rev",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "typeof",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "vocab",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "autoCorrect",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "autoSave",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "color",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "itemProp",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "itemScope",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "itemType",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "itemID",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "itemRef",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "results",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "security",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "unselectable",
        "type": "\"off\" | \"on\" | undefined",
        "required": false
      },
      {
        "name": "popover",
        "type": "\"\" | \"auto\" | \"manual\" | undefined",
        "required": false
      },
      {
        "name": "popoverTargetAction",
        "type": "\"toggle\" | \"show\" | \"hide\" | undefined",
        "required": false
      },
      {
        "name": "popoverTarget",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "inert",
        "type": "boolean | undefined",
        "required": false
      },
      {
        "name": "inputMode",
        "type": "\"email\" | \"tel\" | \"search\" | \"text\" | \"url\" | \"none\" | \"numeric\" | \"decimal\" | undefined",
        "required": false
      },
      {
        "name": "is",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "exportparts",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "part",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-activedescendant",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-atomic",
        "type": "Booleanish | undefined",
        "required": false
      },
      {
        "name": "aria-autocomplete",
        "type": "\"none\" | \"list\" | \"inline\" | \"both\" | undefined",
        "required": false
      },
      {
        "name": "aria-braillelabel",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-brailleroledescription",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-busy",
        "type": "Booleanish | undefined",
        "required": false
      },
      {
        "name": "aria-checked",
        "type": "boolean | \"true\" | \"false\" | \"mixed\" | undefined",
        "required": false
      },
      {
        "name": "aria-colcount",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "aria-colindex",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "aria-colindextext",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-colspan",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "aria-controls",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-current",
        "type": "boolean | \"date\" | \"time\" | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | undefined",
        "required": false
      },
      {
        "name": "aria-describedby",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-description",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-details",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-disabled",
        "type": "Booleanish | undefined",
        "required": false
      },
      {
        "name": "aria-dropeffect",
        "type": "\"none\" | \"link\" | \"copy\" | \"execute\" | \"move\" | \"popup\" | undefined",
        "required": false
      },
      {
        "name": "aria-errormessage",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-expanded",
        "type": "Booleanish | undefined",
        "required": false
      },
      {
        "name": "aria-flowto",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-grabbed",
        "type": "Booleanish | undefined",
        "required": false
      },
      {
        "name": "aria-haspopup",
        "type": "boolean | \"true\" | \"false\" | \"dialog\" | \"grid\" | \"listbox\" | \"menu\" | \"tree\" | undefined",
        "required": false
      },
      {
        "name": "aria-hidden",
        "type": "Booleanish | undefined",
        "required": false
      },
      {
        "name": "aria-invalid",
        "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\" | undefined",
        "required": false
      },
      {
        "name": "aria-keyshortcuts",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-label",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-labelledby",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-level",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "aria-live",
        "type": "\"off\" | \"assertive\" | \"polite\" | undefined",
        "required": false
      },
      {
        "name": "aria-modal",
        "type": "Booleanish | undefined",
        "required": false
      },
      {
        "name": "aria-multiline",
        "type": "Booleanish | undefined",
        "required": false
      },
      {
        "name": "aria-multiselectable",
        "type": "Booleanish | undefined",
        "required": false
      },
      {
        "name": "aria-orientation",
        "type": "\"horizontal\" | \"vertical\" | undefined",
        "required": false
      },
      {
        "name": "aria-owns",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-placeholder",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-posinset",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "aria-pressed",
        "type": "boolean | \"true\" | \"false\" | \"mixed\" | undefined",
        "required": false
      },
      {
        "name": "aria-readonly",
        "type": "Booleanish | undefined",
        "required": false
      },
      {
        "name": "aria-relevant",
        "type": "\"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"all\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\" | undefined",
        "required": false
      },
      {
        "name": "aria-required",
        "type": "Booleanish | undefined",
        "required": false
      },
      {
        "name": "aria-roledescription",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-rowcount",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "aria-rowindex",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "aria-rowindextext",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "aria-rowspan",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "aria-selected",
        "type": "Booleanish | undefined",
        "required": false
      },
      {
        "name": "aria-setsize",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "aria-sort",
        "type": "\"none\" | \"ascending\" | \"descending\" | \"other\" | undefined",
        "required": false
      },
      {
        "name": "aria-valuemax",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "aria-valuemin",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "aria-valuenow",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "aria-valuetext",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false
      },
      {
        "name": "dangerouslySetInnerHTML",
        "type": "{ __html: string | TrustedHTML; } | undefined",
        "required": false
      },
      {
        "name": "onCopy",
        "type": "ClipboardEventHandler<HTMLInputElement> | undefined | ClipboardEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onCopyCapture",
        "type": "ClipboardEventHandler<HTMLInputElement> | undefined | ClipboardEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onCut",
        "type": "ClipboardEventHandler<HTMLInputElement> | undefined | ClipboardEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onCutCapture",
        "type": "ClipboardEventHandler<HTMLInputElement> | undefined | ClipboardEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPaste",
        "type": "ClipboardEventHandler<HTMLInputElement> | undefined | ClipboardEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPasteCapture",
        "type": "ClipboardEventHandler<HTMLInputElement> | undefined | ClipboardEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onCompositionEnd",
        "type": "CompositionEventHandler<HTMLInputElement> | undefined | CompositionEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onCompositionEndCapture",
        "type": "CompositionEventHandler<HTMLInputElement> | undefined | CompositionEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onCompositionStart",
        "type": "CompositionEventHandler<HTMLInputElement> | undefined | CompositionEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onCompositionStartCapture",
        "type": "CompositionEventHandler<HTMLInputElement> | undefined | CompositionEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onCompositionUpdate",
        "type": "CompositionEventHandler<HTMLInputElement> | undefined | CompositionEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onCompositionUpdateCapture",
        "type": "CompositionEventHandler<HTMLInputElement> | undefined | CompositionEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onFocus",
        "type": "FocusEventHandler<HTMLInputElement> | undefined | FocusEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onFocusCapture",
        "type": "FocusEventHandler<HTMLInputElement> | undefined | FocusEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onBlur",
        "type": "FocusEventHandler<HTMLInputElement> | undefined | FocusEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onBlurCapture",
        "type": "FocusEventHandler<HTMLInputElement> | undefined | FocusEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onChangeCapture",
        "type": "FormEventHandler<HTMLInputElement> | undefined | FormEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onBeforeInput",
        "type": "InputEventHandler<HTMLInputElement> | undefined | InputEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onBeforeInputCapture",
        "type": "FormEventHandler<HTMLInputElement> | undefined | FormEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onInput",
        "type": "FormEventHandler<HTMLInputElement> | undefined | FormEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onInputCapture",
        "type": "FormEventHandler<HTMLInputElement> | undefined | FormEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onReset",
        "type": "FormEventHandler<HTMLInputElement> | undefined | FormEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onResetCapture",
        "type": "FormEventHandler<HTMLInputElement> | undefined | FormEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onSubmit",
        "type": "FormEventHandler<HTMLInputElement> | undefined | FormEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onSubmitCapture",
        "type": "FormEventHandler<HTMLInputElement> | undefined | FormEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onInvalid",
        "type": "FormEventHandler<HTMLInputElement> | undefined | FormEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onInvalidCapture",
        "type": "FormEventHandler<HTMLInputElement> | undefined | FormEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onLoad",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onLoadCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onError",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onErrorCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onKeyDown",
        "type": "KeyboardEventHandler<HTMLInputElement> | undefined | KeyboardEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onKeyDownCapture",
        "type": "KeyboardEventHandler<HTMLInputElement> | undefined | KeyboardEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onKeyPress",
        "type": "KeyboardEventHandler<HTMLInputElement> | undefined | KeyboardEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onKeyPressCapture",
        "type": "KeyboardEventHandler<HTMLInputElement> | undefined | KeyboardEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onKeyUp",
        "type": "KeyboardEventHandler<HTMLInputElement> | undefined | KeyboardEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onKeyUpCapture",
        "type": "KeyboardEventHandler<HTMLInputElement> | undefined | KeyboardEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onAbort",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onAbortCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onCanPlay",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onCanPlayCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onCanPlayThrough",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onCanPlayThroughCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDurationChange",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDurationChangeCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onEmptied",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onEmptiedCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onEncrypted",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onEncryptedCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onEnded",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onEndedCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onLoadedData",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onLoadedDataCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onLoadedMetadata",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onLoadedMetadataCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onLoadStart",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onLoadStartCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPause",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPauseCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPlay",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPlayCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPlaying",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPlayingCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onProgress",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onProgressCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onRateChange",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onRateChangeCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onSeeked",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onSeekedCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onSeeking",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onSeekingCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onStalled",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onStalledCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onSuspend",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onSuspendCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTimeUpdate",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTimeUpdateCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onVolumeChange",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onVolumeChangeCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onWaiting",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onWaitingCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onAuxClick",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onAuxClickCapture",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onClick",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onClickCapture",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onContextMenu",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onContextMenuCapture",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDoubleClick",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDoubleClickCapture",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDrag",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDragCapture",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDragEnd",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDragEndCapture",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDragEnter",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDragEnterCapture",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDragExit",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDragExitCapture",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDragLeave",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDragLeaveCapture",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDragOver",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDragOverCapture",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDragStart",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDragStartCapture",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDrop",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onDropCapture",
        "type": "DragEventHandler<HTMLInputElement> | undefined | DragEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onMouseDown",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onMouseDownCapture",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onMouseEnter",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onMouseLeave",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onMouseMove",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onMouseMoveCapture",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onMouseOut",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onMouseOutCapture",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onMouseOver",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onMouseOverCapture",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onMouseUp",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onMouseUpCapture",
        "type": "MouseEventHandler<HTMLInputElement> | undefined | MouseEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onSelect",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onSelectCapture",
        "type": "ReactEventHandler<HTMLInputElement> | undefined | ReactEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTouchCancel",
        "type": "TouchEventHandler<HTMLInputElement> | undefined | TouchEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTouchCancelCapture",
        "type": "TouchEventHandler<HTMLInputElement> | undefined | TouchEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTouchEnd",
        "type": "TouchEventHandler<HTMLInputElement> | undefined | TouchEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTouchEndCapture",
        "type": "TouchEventHandler<HTMLInputElement> | undefined | TouchEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTouchMove",
        "type": "TouchEventHandler<HTMLInputElement> | undefined | TouchEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTouchMoveCapture",
        "type": "TouchEventHandler<HTMLInputElement> | undefined | TouchEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTouchStart",
        "type": "TouchEventHandler<HTMLInputElement> | undefined | TouchEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTouchStartCapture",
        "type": "TouchEventHandler<HTMLInputElement> | undefined | TouchEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPointerDown",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPointerDownCapture",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPointerMove",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPointerMoveCapture",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPointerUp",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPointerUpCapture",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPointerCancel",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPointerCancelCapture",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPointerEnter",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPointerLeave",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPointerOver",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPointerOverCapture",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPointerOut",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onPointerOutCapture",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onGotPointerCapture",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onGotPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onLostPointerCapture",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onLostPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLInputElement> | undefined | PointerEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onScroll",
        "type": "UIEventHandler<HTMLInputElement> | undefined | UIEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onScrollCapture",
        "type": "UIEventHandler<HTMLInputElement> | undefined | UIEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onScrollEnd",
        "type": "UIEventHandler<HTMLInputElement> | undefined | UIEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onScrollEndCapture",
        "type": "UIEventHandler<HTMLInputElement> | undefined | UIEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onWheel",
        "type": "WheelEventHandler<HTMLInputElement> | undefined | WheelEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onWheelCapture",
        "type": "WheelEventHandler<HTMLInputElement> | undefined | WheelEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onAnimationStart",
        "type": "AnimationEventHandler<HTMLInputElement> | undefined | AnimationEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onAnimationStartCapture",
        "type": "AnimationEventHandler<HTMLInputElement> | undefined | AnimationEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onAnimationEnd",
        "type": "AnimationEventHandler<HTMLInputElement> | undefined | AnimationEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onAnimationEndCapture",
        "type": "AnimationEventHandler<HTMLInputElement> | undefined | AnimationEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onAnimationIteration",
        "type": "AnimationEventHandler<HTMLInputElement> | undefined | AnimationEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onAnimationIterationCapture",
        "type": "AnimationEventHandler<HTMLInputElement> | undefined | AnimationEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onToggle",
        "type": "ToggleEventHandler<HTMLInputElement> | undefined | ToggleEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onBeforeToggle",
        "type": "ToggleEventHandler<HTMLInputElement> | undefined | ToggleEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTransitionCancel",
        "type": "TransitionEventHandler<HTMLInputElement> | undefined | TransitionEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTransitionCancelCapture",
        "type": "TransitionEventHandler<HTMLInputElement> | undefined | TransitionEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTransitionEnd",
        "type": "TransitionEventHandler<HTMLInputElement> | undefined | TransitionEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTransitionEndCapture",
        "type": "TransitionEventHandler<HTMLInputElement> | undefined | TransitionEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTransitionRun",
        "type": "TransitionEventHandler<HTMLInputElement> | undefined | TransitionEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTransitionRunCapture",
        "type": "TransitionEventHandler<HTMLInputElement> | undefined | TransitionEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTransitionStart",
        "type": "TransitionEventHandler<HTMLInputElement> | undefined | TransitionEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "onTransitionStartCapture",
        "type": "TransitionEventHandler<HTMLInputElement> | undefined | TransitionEventHandler<HTMLTextAreaElement> | undefined",
        "required": false
      },
      {
        "name": "as",
        "type": "\"input\" | undefined | \"textarea\"",
        "required": false
      },
      {
        "name": "rows",
        "type": "undefined | number | undefined",
        "required": false
      },
      {
        "name": "cols",
        "type": "number | undefined",
        "required": false
      },
      {
        "name": "dirName",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "wrap",
        "type": "string | undefined",
        "required": false
      }
    ],
    "domPassthrough": {
      "element": "input|textarea",
      "omitted": []
    },
    "cssVars": [],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [
      {
        "name": "children"
      }
    ],
    "sourceFiles": [
      "src/components/fields/TextField.tsx"
    ]
  },
  "Accordion": {
    "name": "Accordion",
    "category": "layout",
    "slug": "components/layout/accordion",
    "summary": "Accordion component",
    "props": [
      {
        "name": "defaultOpen",
        "type": "number | number[]",
        "required": false
      },
      {
        "name": "open",
        "type": "number | number[]",
        "required": false
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "onOpenChange",
        "type": "(open: number[]) => void",
        "required": false
      },
      {
        "name": "headingLevel",
        "type": "1 | 2 | 3 | 4 | 5 | 6",
        "required": false,
        "default": "3"
      },
      {
        "name": "constrainHeight",
        "type": "boolean",
        "required": false,
        "default": "true"
      },
      {
        "name": "compact",
        "type": "unknown",
        "required": false,
        "default": "false"
      }
    ],
    "cssVars": [
      "--valet-divider-stroke",
      "--valet-focus-width",
      "--valet-focus-offset"
    ],
    "cssPresets": [],
    "events": [
      {
        "name": "onOpenChange",
        "payloadType": "number[]"
      }
    ],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/layout/Accordion.tsx"
    ]
  },
  "AppBar": {
    "name": "AppBar",
    "category": "layout",
    "slug": "components/layout/appbar",
    "summary": "AppBar component",
    "props": [
      {
        "name": "color",
        "type": "AppBarToken | string",
        "required": false
      },
      {
        "name": "textColor",
        "type": "AppBarToken | string",
        "required": false
      },
      {
        "name": "left",
        "type": "React.ReactNode",
        "required": false
      },
      {
        "name": "right",
        "type": "React.ReactNode",
        "required": false
      },
      {
        "name": "pad",
        "type": "Space",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-bg",
      "--valet-text-color"
    ],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [
      {
        "name": "left"
      },
      {
        "name": "right"
      }
    ],
    "sourceFiles": [
      "src/components/layout/AppBar.tsx"
    ]
  },
  "Box": {
    "name": "Box",
    "category": "layout",
    "slug": "components/layout/box",
    "summary": "Box component",
    "props": [
      {
        "name": "background",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "textColor",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "centerContent",
        "type": "boolean",
        "required": false
      },
      {
        "name": "fullWidth",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "alignX",
        "type": "'left' | 'right' | 'center' | 'centered'",
        "required": false,
        "enumValues": [
          "left",
          "right",
          "center",
          "centered"
        ]
      },
      {
        "name": "centered",
        "type": "boolean",
        "required": false,
        "deprecated": true
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "domPassthrough": {
      "element": "div",
      "omitted": [
        "style"
      ]
    },
    "cssVars": [
      "--valet-box-max-h",
      "--valet-bg",
      "--valet-text-color",
      "--valet-centered"
    ],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/layout/Box.tsx"
    ]
  },
  "Drawer": {
    "name": "Drawer",
    "category": "layout",
    "slug": "components/layout/drawer",
    "summary": "Drawer component",
    "props": [
      {
        "name": "open",
        "type": "boolean",
        "required": false
      },
      {
        "name": "defaultOpen",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "anchor",
        "type": "DrawerAnchor",
        "required": false,
        "default": "'left'"
      },
      {
        "name": "onClose",
        "type": "() => void",
        "required": false
      },
      {
        "name": "size",
        "type": "number | string",
        "required": false,
        "default": "'16rem'"
      },
      {
        "name": "disableBackdropClick",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "disableEscapeKeyDown",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "persistent",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "adaptive",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "toggleIcon",
        "type": "string",
        "required": false,
        "default": "'mdi:menu'"
      },
      {
        "name": "closeIcon",
        "type": "string",
        "required": false,
        "default": "'mdi:close'"
      },
      {
        "name": "children",
        "type": "React.ReactNode",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [
      {
        "name": "onClose"
      }
    ],
    "actions": [],
    "slots": [
      {
        "name": "children"
      }
    ],
    "sourceFiles": [
      "src/components/layout/Drawer.tsx"
    ]
  },
  "Grid": {
    "name": "Grid",
    "category": "layout",
    "slug": "components/layout/grid",
    "summary": "Grid component",
    "props": [
      {
        "name": "columns",
        "type": "number",
        "required": false,
        "default": "2"
      },
      {
        "name": "adaptive",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "compact",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-panel-ov-y",
      "--valet-panel-max-h",
      "--valet-stack-ov-y",
      "--valet-stack-max-h",
      "--valet-box-max-h"
    ],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/layout/Grid.tsx"
    ]
  },
  "List": {
    "name": "List",
    "category": "layout",
    "slug": "components/layout/list",
    "summary": "List component",
    "props": [
      {
        "name": "data",
        "type": "T[]",
        "required": true
      },
      {
        "name": "getTitle",
        "type": "(item: T) => React.ReactNode",
        "required": true
      },
      {
        "name": "getSubtitle",
        "type": "(item: T) => React.ReactNode",
        "required": false
      },
      {
        "name": "striped",
        "type": "boolean",
        "required": false
      },
      {
        "name": "hoverable",
        "type": "boolean",
        "required": false
      },
      {
        "name": "onReorder",
        "type": "(items: T[]) => void",
        "required": false
      },
      {
        "name": "reorderable",
        "type": "boolean",
        "required": false
      },
      {
        "name": "selectable",
        "type": "boolean",
        "required": false
      },
      {
        "name": "selected",
        "type": "T | null",
        "required": false
      },
      {
        "name": "defaultSelected",
        "type": "T | null",
        "required": false
      },
      {
        "name": "onSelectionChange",
        "type": "(item: T, index: number) => void",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [
      {
        "name": "onReorder",
        "payloadType": "T[]"
      },
      {
        "name": "onSelectionChange",
        "payloadType": "T"
      }
    ],
    "actions": [],
    "slots": [
      {
        "name": "getTitle"
      },
      {
        "name": "getSubtitle"
      }
    ],
    "sourceFiles": [
      "src/components/layout/List.tsx"
    ]
  },
  "Modal": {
    "name": "Modal",
    "category": "layout",
    "slug": "components/layout/modal",
    "summary": "Modal component",
    "props": [
      {
        "name": "open",
        "type": "boolean",
        "required": false
      },
      {
        "name": "defaultOpen",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "onClose",
        "type": "() => void",
        "required": false
      },
      {
        "name": "variant",
        "type": "'dialog' | 'alert'",
        "required": false,
        "default": "'dialog'",
        "enumValues": [
          "dialog",
          "alert"
        ]
      },
      {
        "name": "title",
        "type": "ReactNode",
        "required": false
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false
      },
      {
        "name": "actions",
        "type": "ReactNode",
        "required": false
      },
      {
        "name": "pad",
        "type": "number | string",
        "required": false
      },
      {
        "name": "compact",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "disableBackdropClick",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "disableEscapeKeyDown",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "maxWidth",
        "type": "number | string",
        "required": false
      },
      {
        "name": "fullWidth",
        "type": "boolean",
        "required": false,
        "default": "false"
      }
    ],
    "cssVars": [
      "--valet-modal-radius"
    ],
    "cssPresets": [],
    "events": [
      {
        "name": "onClose"
      }
    ],
    "actions": [],
    "slots": [
      {
        "name": "title"
      },
      {
        "name": "children"
      },
      {
        "name": "actions"
      }
    ],
    "sourceFiles": [
      "src/components/layout/Modal.tsx"
    ]
  },
  "Panel": {
    "name": "Panel",
    "category": "layout",
    "slug": "components/layout/panel",
    "summary": "Panel component",
    "props": [
      {
        "name": "variant",
        "type": "PanelVariant",
        "required": false,
        "default": "'main'"
      },
      {
        "name": "fullWidth",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "background",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "centerContent",
        "type": "boolean",
        "required": false
      },
      {
        "name": "alignX",
        "type": "'left' | 'right' | 'center' | 'centered'",
        "required": false,
        "enumValues": [
          "left",
          "right",
          "center",
          "centered"
        ]
      }
    ],
    "domPassthrough": {
      "element": "div",
      "omitted": [
        "style"
      ]
    },
    "cssVars": [
      "--valet-panel-max-h",
      "--valet-panel-ov-y",
      "--valet-bg",
      "--valet-text-color",
      "--valet-centered"
    ],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/layout/Panel.tsx"
    ]
  },
  "Stack": {
    "name": "Stack",
    "category": "layout",
    "slug": "components/layout/stack",
    "summary": "Stack component",
    "props": [
      {
        "name": "direction",
        "type": "'row' | 'column'",
        "required": false,
        "default": "'column'",
        "enumValues": [
          "row",
          "column"
        ]
      },
      {
        "name": "wrap",
        "type": "boolean",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-stack-max-h",
      "--valet-stack-ov-y"
    ],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/layout/Stack.tsx"
    ]
  },
  "Surface": {
    "name": "Surface",
    "category": "layout",
    "slug": "components/layout/surface",
    "summary": "Surface component",
    "props": [
      {
        "name": "fullscreen",
        "type": "boolean",
        "required": false,
        "default": "true"
      },
      {
        "name": "density",
        "type": "Density",
        "required": false
      },
      {
        "name": "blockUntilFonts",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-space",
      "--valet-bg",
      "--valet-text-color",
      "--valet-font-heading",
      "--valet-font-body",
      "--valet-font-mono",
      "--valet-font-button",
      "--valet-radius",
      "--valet-stroke",
      "--valet-focus-width",
      "--valet-focus-offset",
      "--valet-divider-stroke",
      "--valet-screen-width",
      "--valet-screen-height"
    ],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/layout/Surface.tsx"
    ]
  },
  "Tabs": {
    "name": "Tabs",
    "category": "layout",
    "slug": "components/layout/tabs",
    "summary": "Tabs component",
    "props": [
      {
        "name": "active",
        "type": "number",
        "required": false
      },
      {
        "name": "defaultActive",
        "type": "number",
        "required": false,
        "default": "0"
      },
      {
        "name": "onTabChange",
        "type": "(i: number) => void",
        "required": false
      },
      {
        "name": "orientation",
        "type": "'horizontal' | 'vertical'",
        "required": false,
        "default": "'horizontal'",
        "enumValues": [
          "horizontal",
          "vertical"
        ]
      },
      {
        "name": "placement",
        "type": "'top' | 'bottom' | 'left' | 'right'",
        "required": false,
        "enumValues": [
          "top",
          "bottom",
          "left",
          "right"
        ]
      },
      {
        "name": "alignX",
        "type": "'left' | 'right' | 'center' | 'centered'",
        "required": false,
        "enumValues": [
          "left",
          "right",
          "center",
          "centered"
        ]
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      },
      {
        "name": "compact",
        "type": "unknown",
        "required": false,
        "default": "false"
      }
    ],
    "cssVars": [
      "--valet-focus-width",
      "--valet-focus-offset",
      "--valet-underline-width"
    ],
    "cssPresets": [],
    "events": [
      {
        "name": "onTabChange",
        "payloadType": "number"
      }
    ],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/layout/Tabs.tsx"
    ]
  },
  "Avatar": {
    "name": "Avatar",
    "category": "primitives",
    "slug": "components/primitives/avatar",
    "summary": "Avatar component",
    "props": [
      {
        "name": "src",
        "type": "string",
        "required": false
      },
      {
        "name": "email",
        "type": "string",
        "required": false
      },
      {
        "name": "size",
        "type": "AvatarSize",
        "required": false,
        "default": "'m'"
      },
      {
        "name": "variant",
        "type": "AvatarVariant",
        "required": false,
        "default": "'plain'"
      },
      {
        "name": "gravatarDefault",
        "type": "string",
        "required": false,
        "default": "'identicon'"
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/primitives/Avatar.tsx"
    ]
  },
  "Divider": {
    "name": "Divider",
    "category": "primitives",
    "slug": "components/primitives/divider",
    "summary": "Divider component",
    "props": [
      {
        "name": "orientation",
        "type": "DividerOrientation",
        "required": false,
        "default": "'horizontal'"
      },
      {
        "name": "lineColor",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "thickness",
        "type": "number | string",
        "required": false,
        "default": "2"
      },
      {
        "name": "length",
        "type": "number | string | undefined",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-text-color",
      "--valet-divider-stroke"
    ],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/primitives/Divider.tsx"
    ]
  },
  "Icon": {
    "name": "Icon",
    "category": "primitives",
    "slug": "components/primitives/icon",
    "summary": "Icon component",
    "props": [
      {
        "name": "icon",
        "type": "string",
        "required": false
      },
      {
        "name": "svg",
        "type": "string | ReactElement<React.SVGProps<SVGSVGElement>>",
        "required": false
      },
      {
        "name": "size",
        "type": "IconSize | number | string",
        "required": false,
        "default": "'md'"
      },
      {
        "name": "color",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [
      {
        "name": "svg"
      }
    ],
    "sourceFiles": [
      "src/components/primitives/Icon.tsx"
    ]
  },
  "Image": {
    "name": "Image",
    "category": "primitives",
    "slug": "components/primitives/image",
    "summary": "Image component",
    "props": [
      {
        "name": "src",
        "type": "string",
        "required": true
      },
      {
        "name": "width",
        "type": "number | string",
        "required": false
      },
      {
        "name": "height",
        "type": "number | string",
        "required": false
      },
      {
        "name": "objectFit",
        "type": "'cover' | 'contain' | 'fill' | 'none' | 'scale-down'",
        "required": false,
        "default": "'cover'",
        "enumValues": [
          "cover",
          "contain",
          "fill",
          "none",
          "scale-down"
        ]
      },
      {
        "name": "rounded",
        "type": "number | string",
        "required": false
      },
      {
        "name": "lazy",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/primitives/Image.tsx"
    ]
  },
  "Progress": {
    "name": "Progress",
    "category": "primitives",
    "slug": "components/primitives/progress",
    "summary": "Progress component",
    "props": [
      {
        "name": "variant",
        "type": "ProgressVariant",
        "required": false
      },
      {
        "name": "mode",
        "type": "ProgressMode",
        "required": false
      },
      {
        "name": "value",
        "type": "number",
        "required": false
      },
      {
        "name": "buffer",
        "type": "number",
        "required": false
      },
      {
        "name": "size",
        "type": "ProgressSize | number | string",
        "required": false
      },
      {
        "name": "showLabel",
        "type": "boolean",
        "required": false
      },
      {
        "name": "color",
        "type": "string | undefined",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      },
      {
        "name": "children",
        "type": "React.ReactNode",
        "required": false
      },
      {
        "name": "fitChild",
        "type": "boolean",
        "required": false
      },
      {
        "name": "childClearance",
        "type": "number",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-text-color"
    ],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [
      {
        "name": "children"
      }
    ],
    "sourceFiles": [
      "src/components/primitives/Progress.tsx"
    ]
  },
  "Skeleton": {
    "name": "Skeleton",
    "category": "primitives",
    "slug": "components/primitives/skeleton",
    "summary": "Skeleton component",
    "props": [
      {
        "name": "loading",
        "type": "boolean",
        "required": false
      },
      {
        "name": "variant",
        "type": "SkeletonVariant",
        "required": false
      },
      {
        "name": "icon",
        "type": "React.ReactNode",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [
      {
        "name": "icon"
      }
    ],
    "sourceFiles": [
      "src/components/primitives/Skeleton.tsx"
    ]
  },
  "Typography": {
    "name": "Typography",
    "category": "primitives",
    "slug": "components/primitives/typography",
    "summary": "Typography component",
    "props": [
      {
        "name": "variant",
        "type": "Variant",
        "required": false,
        "default": "'body'"
      },
      {
        "name": "bold",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "italic",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "weight",
        "type": "number | WeightAlias",
        "required": false
      },
      {
        "name": "tracking",
        "type": "number | 'tight' | 'normal' | 'loose'",
        "required": false,
        "enumValues": [
          "tight",
          "normal",
          "loose"
        ]
      },
      {
        "name": "leading",
        "type": "number | 'tight' | 'normal' | 'loose'",
        "required": false,
        "enumValues": [
          "tight",
          "normal",
          "loose"
        ]
      },
      {
        "name": "optical",
        "type": "'auto' | number | 'none'",
        "required": false
      },
      {
        "name": "fluid",
        "type": "boolean",
        "required": false
      },
      {
        "name": "centered",
        "type": "boolean",
        "required": false
      },
      {
        "name": "noSelect",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "fontSize",
        "type": "string",
        "required": false
      },
      {
        "name": "scale",
        "type": "number",
        "required": false
      },
      {
        "name": "autoSize",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "color",
        "type": "string",
        "required": false
      },
      {
        "name": "family",
        "type": "'heading' | 'body' | 'mono' | 'button'",
        "required": false,
        "enumValues": [
          "heading",
          "body",
          "mono",
          "button"
        ]
      },
      {
        "name": "fontFamily",
        "type": "string",
        "required": false
      },
      {
        "name": "whitespace",
        "type": "'normal' | 'pre' | 'pre-wrap' | 'pre-line'",
        "required": false,
        "default": "'normal'",
        "enumValues": [
          "normal",
          "pre",
          "pre-wrap",
          "pre-line"
        ]
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-bg",
      "--valet-text-color",
      "--valet-font-weight",
      "--valet-font-tracking",
      "--valet-font-leading",
      "--valet-font-"
    ],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/primitives/Typography.tsx"
    ]
  },
  "Video": {
    "name": "Video",
    "category": "primitives",
    "slug": "components/primitives/video",
    "summary": "Video component",
    "props": [
      {
        "name": "sources",
        "type": "VideoSource[]",
        "required": true
      },
      {
        "name": "poster",
        "type": "string",
        "required": false
      },
      {
        "name": "tracks",
        "type": "VideoTrack[]",
        "required": false
      },
      {
        "name": "controls",
        "type": "boolean",
        "required": false,
        "default": "true"
      },
      {
        "name": "autoPlay",
        "type": "boolean",
        "required": false,
        "default": "true"
      },
      {
        "name": "muted",
        "type": "boolean",
        "required": false,
        "default": "true"
      },
      {
        "name": "loop",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "width",
        "type": "string",
        "required": false
      },
      {
        "name": "height",
        "type": "string",
        "required": false
      },
      {
        "name": "lazy",
        "type": "boolean",
        "required": false
      },
      {
        "name": "objectFit",
        "type": "'contain' | 'cover'",
        "required": false,
        "default": "'contain'",
        "enumValues": [
          "contain",
          "cover"
        ]
      },
      {
        "name": "className",
        "type": "string",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/primitives/Video.tsx"
    ]
  },
  "CodeBlock": {
    "name": "CodeBlock",
    "category": "widgets",
    "slug": "components/widgets/codeblock",
    "summary": "CodeBlock component",
    "props": [
      {
        "name": "code",
        "type": "string",
        "required": true
      },
      {
        "name": "language",
        "type": "string",
        "required": false,
        "default": "'typescript'"
      },
      {
        "name": "ariaLabel",
        "type": "string",
        "required": false
      },
      {
        "name": "title",
        "type": "string",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/widgets/CodeBlock.tsx"
    ]
  },
  "Dropzone": {
    "name": "Dropzone",
    "category": "widgets",
    "slug": "components/widgets/dropzone",
    "summary": "Dropzone component",
    "props": [
      {
        "name": "accept",
        "type": "DropzoneOptions['accept']",
        "required": false
      },
      {
        "name": "showPreviews",
        "type": "boolean",
        "required": false,
        "default": "true"
      },
      {
        "name": "showFileList",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "onFilesChange",
        "type": "(files: File[]) => void",
        "required": false
      },
      {
        "name": "maxFiles",
        "type": "number",
        "required": false
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "default": "true"
      },
      {
        "name": "onDrop",
        "type": "DropzoneOptions['onDrop']",
        "required": false
      },
      {
        "name": "fullWidth",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [
      {
        "name": "onFilesChange",
        "payloadType": "File[]"
      }
    ],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/widgets/Dropzone.tsx"
    ]
  },
  "LLMChat": {
    "name": "LLMChat",
    "category": "widgets",
    "slug": "components/widgets/llmchat",
    "summary": "LLMChat component",
    "props": [
      {
        "name": "placeholder",
        "type": "unknown",
        "required": false,
        "default": "'Message…'"
      },
      {
        "name": "disableInput",
        "type": "unknown",
        "required": false,
        "default": "false"
      },
      {
        "name": "constrainHeight",
        "type": "unknown",
        "required": false,
        "default": "true"
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/widgets/LLMChat.tsx"
    ]
  },
  "LoadingBackdrop": {
    "name": "LoadingBackdrop",
    "category": "widgets",
    "slug": "components/widgets/loadingbackdrop",
    "summary": "LoadingBackdrop component",
    "props": [
      {
        "name": "fading",
        "type": "boolean",
        "required": false
      },
      {
        "name": "showSpinner",
        "type": "boolean",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/widgets/LoadingBackdrop.tsx"
    ]
  },
  "Markdown": {
    "name": "Markdown",
    "category": "widgets",
    "slug": "components/widgets/markdown",
    "summary": "Markdown component",
    "props": [
      {
        "name": "data",
        "type": "string",
        "required": true
      },
      {
        "name": "codeBackground",
        "type": "string",
        "required": false
      },
      {
        "name": "sx",
        "type": "import('../../types').Sx",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/widgets/Markdown.tsx"
    ]
  },
  "Pagination": {
    "name": "Pagination",
    "category": "widgets",
    "slug": "components/widgets/pagination",
    "summary": "Pagination component",
    "props": [
      {
        "name": "count",
        "type": "number",
        "required": true
      },
      {
        "name": "page",
        "type": "number",
        "required": false,
        "default": "1"
      },
      {
        "name": "onChange",
        "type": "(page: number) => void",
        "required": false
      },
      {
        "name": "visibleWindow",
        "type": "number",
        "required": false
      },
      {
        "name": "autoFollowActive",
        "type": "boolean",
        "required": false,
        "default": "true"
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-underline-width"
    ],
    "cssPresets": [],
    "events": [
      {
        "name": "onChange",
        "payloadType": "number"
      }
    ],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/widgets/Pagination.tsx"
    ]
  },
  "ParallaxBackground": {
    "name": "ParallaxBackground",
    "category": "widgets",
    "slug": "components/widgets/parallaxbackground",
    "summary": "ParallaxBackground component",
    "props": [
      {
        "name": "src",
        "type": "string",
        "required": true
      },
      {
        "name": "mediaType",
        "type": "MediaType",
        "required": false
      },
      {
        "name": "poster",
        "type": "string",
        "required": false
      },
      {
        "name": "loop",
        "type": "boolean",
        "required": false,
        "default": "true"
      },
      {
        "name": "muted",
        "type": "boolean",
        "required": false,
        "default": "true"
      },
      {
        "name": "autoPlay",
        "type": "boolean",
        "required": false,
        "default": "true"
      },
      {
        "name": "preload",
        "type": "'none' | 'metadata' | 'auto'",
        "required": false,
        "default": "'auto'",
        "enumValues": [
          "none",
          "metadata",
          "auto"
        ]
      },
      {
        "name": "speed",
        "type": "unknown",
        "required": false,
        "default": "0.5"
      },
      {
        "name": "axis",
        "type": "unknown",
        "required": false,
        "default": "'y'"
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/widgets/Parallax.tsx"
    ]
  },
  "RichChat": {
    "name": "RichChat",
    "category": "widgets",
    "slug": "components/widgets/richchat",
    "summary": "RichChat component",
    "props": [
      {
        "name": "messages",
        "type": "RichMessage[]",
        "required": true
      },
      {
        "name": "onFormSubmit",
        "type": "(value: string, index: number) => void",
        "required": false
      },
      {
        "name": "onSend",
        "type": "(message: RichMessage) => void",
        "required": false
      },
      {
        "name": "userAvatar",
        "type": "string",
        "required": false
      },
      {
        "name": "systemAvatar",
        "type": "string",
        "required": false
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "default": "'Message…'"
      },
      {
        "name": "disableInput",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "constrainHeight",
        "type": "boolean",
        "required": false,
        "default": "true"
      },
      {
        "name": "fontFamily",
        "type": "string",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [
      {
        "name": "onFormSubmit",
        "payloadType": "string"
      },
      {
        "name": "onSend",
        "payloadType": "RichMessage"
      }
    ],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/widgets/RichChat.tsx"
    ]
  },
  "Snackbar": {
    "name": "Snackbar",
    "category": "widgets",
    "slug": "components/widgets/snackbar",
    "summary": "Snackbar component",
    "props": [
      {
        "name": "open",
        "type": "boolean",
        "required": false
      },
      {
        "name": "onClose",
        "type": "() => void",
        "required": false
      },
      {
        "name": "autoHideDuration",
        "type": "number | null",
        "required": false,
        "default": "4000"
      },
      {
        "name": "message",
        "type": "React.ReactNode",
        "required": false
      },
      {
        "name": "noStack",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [
      {
        "name": "onClose"
      }
    ],
    "actions": [],
    "slots": [
      {
        "name": "message"
      }
    ],
    "sourceFiles": [
      "src/components/widgets/Snackbar.tsx"
    ]
  },
  "SpeedDial": {
    "name": "SpeedDial",
    "category": "widgets",
    "slug": "components/widgets/speeddial",
    "summary": "SpeedDial component",
    "props": [
      {
        "name": "icon",
        "type": "React.ReactNode",
        "required": true
      },
      {
        "name": "actions",
        "type": "SpeedDialAction[]",
        "required": true
      },
      {
        "name": "direction",
        "type": "'up' | 'down' | 'left' | 'right'",
        "required": false,
        "default": "'up'",
        "enumValues": [
          "up",
          "down",
          "left",
          "right"
        ]
      }
    ],
    "cssVars": [],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [
      {
        "name": "icon"
      }
    ],
    "sourceFiles": [
      "src/components/widgets/SpeedDial.tsx"
    ]
  },
  "Stepper": {
    "name": "Stepper",
    "category": "widgets",
    "slug": "components/widgets/stepper",
    "summary": "Stepper component",
    "props": [
      {
        "name": "steps",
        "type": "React.ReactNode[]",
        "required": true
      },
      {
        "name": "active",
        "type": "number",
        "required": false,
        "default": "0"
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-stepper-stroke",
      "--valet-stepper-radius"
    ],
    "cssPresets": [],
    "events": [],
    "actions": [],
    "slots": [
      {
        "name": "steps"
      }
    ],
    "sourceFiles": [
      "src/components/widgets/Stepper.tsx"
    ]
  },
  "Table": {
    "name": "Table",
    "category": "widgets",
    "slug": "components/widgets/table",
    "summary": "Table component",
    "props": [
      {
        "name": "data",
        "type": "T[]",
        "required": true
      },
      {
        "name": "columns",
        "type": "TableColumn<T>[]",
        "required": true
      },
      {
        "name": "striped",
        "type": "boolean",
        "required": false
      },
      {
        "name": "hoverable",
        "type": "boolean",
        "required": false
      },
      {
        "name": "dividers",
        "type": "boolean",
        "required": false
      },
      {
        "name": "selectable",
        "type": "'single' | 'multi' | undefined",
        "required": false,
        "enumValues": [
          "single",
          "multi"
        ]
      },
      {
        "name": "initialSort",
        "type": "{ index: number; desc?: boolean }",
        "required": false
      },
      {
        "name": "onSortChange",
        "type": "(index: number, desc: boolean) => void",
        "required": false
      },
      {
        "name": "onSelectionChange",
        "type": "(selected: T[]) => void",
        "required": false
      },
      {
        "name": "constrainHeight",
        "type": "boolean",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-divider-stroke",
      "--valet-underline-width",
      "--valet-bg",
      "--valet-table-underline"
    ],
    "cssPresets": [],
    "events": [
      {
        "name": "onSortChange",
        "payloadType": "number"
      },
      {
        "name": "onSelectionChange",
        "payloadType": "T[]"
      }
    ],
    "actions": [],
    "slots": [],
    "sourceFiles": [
      "src/components/widgets/Table.tsx"
    ]
  },
  "Tooltip": {
    "name": "Tooltip",
    "category": "widgets",
    "slug": "components/widgets/tooltip",
    "summary": "Tooltip component",
    "props": [
      {
        "name": "title",
        "type": "ReactNode",
        "required": true
      },
      {
        "name": "placement",
        "type": "Placement",
        "required": false,
        "default": "'top'"
      },
      {
        "name": "arrow",
        "type": "boolean",
        "required": false,
        "default": "true"
      },
      {
        "name": "enterDelay",
        "type": "number",
        "required": false,
        "default": "100"
      },
      {
        "name": "leaveDelay",
        "type": "number",
        "required": false,
        "default": "100"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false
      },
      {
        "name": "defaultOpen",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "disableHoverListener",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "disableFocusListener",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "disableTouchListener",
        "type": "boolean",
        "required": false,
        "default": "false"
      },
      {
        "name": "onOpen",
        "type": "() => void",
        "required": false
      },
      {
        "name": "onClose",
        "type": "() => void",
        "required": false
      },
      {
        "name": "children",
        "type": "ReactElement",
        "required": true
      }
    ],
    "cssVars": [
      "--valet-tooltip-arrow-size"
    ],
    "cssPresets": [],
    "events": [
      {
        "name": "onOpen"
      },
      {
        "name": "onClose"
      }
    ],
    "actions": [],
    "slots": [
      {
        "name": "title"
      },
      {
        "name": "children"
      }
    ],
    "sourceFiles": [
      "src/components/widgets/Tooltip.tsx"
    ]
  },
  "Tree": {
    "name": "Tree",
    "category": "widgets",
    "slug": "components/widgets/tree",
    "summary": "Tree component",
    "props": [
      {
        "name": "nodes",
        "type": "TreeNode<T>[]",
        "required": true
      },
      {
        "name": "getLabel",
        "type": "(node: T) => React.ReactNode",
        "required": true
      },
      {
        "name": "defaultExpanded",
        "type": "string[]",
        "required": false
      },
      {
        "name": "expanded",
        "type": "string[]",
        "required": false
      },
      {
        "name": "onExpandedChange",
        "type": "(expanded: string[]) => void",
        "required": false
      },
      {
        "name": "selected",
        "type": "string",
        "required": false
      },
      {
        "name": "defaultSelected",
        "type": "string",
        "required": false
      },
      {
        "name": "onNodeSelect",
        "type": "(node: T) => void",
        "required": false
      },
      {
        "name": "variant",
        "type": "'chevron' | 'list' | 'files'",
        "required": false,
        "enumValues": [
          "chevron",
          "list",
          "files"
        ]
      },
      {
        "name": "iconToggleOnly",
        "type": "boolean",
        "required": false
      },
      {
        "name": "sx",
        "type": "Sx",
        "required": false
      }
    ],
    "cssVars": [
      "--valet-focus-width",
      "--valet-focus-offset",
      "--valet-divider-stroke",
      "--valet-tree-stroke",
      "--valet-tree-outline",
      "--valet-tree-offset"
    ],
    "cssPresets": [],
    "events": [
      {
        "name": "onExpandedChange",
        "payloadType": "string[]"
      },
      {
        "name": "onNodeSelect",
        "payloadType": "T"
      }
    ],
    "actions": [],
    "slots": [
      {
        "name": "getLabel"
      }
    ],
    "sourceFiles": [
      "src/components/widgets/Tree.tsx"
    ]
  }
}