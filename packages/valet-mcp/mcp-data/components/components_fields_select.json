{
  "name": "Select",
  "category": "fields",
  "slug": "components/fields/select",
  "summary": "Select component",
  "status": "experimental",
  "aliases": [
    "select",
    "dropdown",
    "combobox"
  ],
  "props": [
    {
      "name": "value",
      "type": "Primitive | Primitive[]",
      "required": false
    },
    {
      "name": "initialValue",
      "type": "Primitive | Primitive[]",
      "required": false
    },
    {
      "name": "onChange",
      "type": "(v: Primitive | Primitive[]) => void",
      "required": false
    },
    {
      "name": "multiple",
      "type": "boolean",
      "required": false
    },
    {
      "name": "placeholder",
      "type": "string",
      "required": false
    },
    {
      "name": "size",
      "type": "SelectSize | number | string",
      "required": false
    },
    {
      "name": "disabled",
      "type": "boolean",
      "required": false
    },
    {
      "name": "name",
      "type": "string",
      "required": false
    },
    {
      "name": "children",
      "type": "React.ReactNode",
      "required": true
    },
    {
      "name": "sx",
      "type": "Sx",
      "required": false
    }
  ],
  "cssVars": [
    "--valet-border",
    "--valet-bg",
    "--valet-text-color"
  ],
  "cssPresets": [],
  "events": [
    {
      "name": "onChange",
      "payloadType": "Primitive | Primitive[]"
    }
  ],
  "actions": [],
  "slots": [
    {
      "name": "children"
    }
  ],
  "bestPractices": [
    "Choose controlled vs uncontrolled deliberately: use `value` + `onChange` to integrate with app state; use `initialValue` for lightweight forms.",
    "Keep option labels short, distinct, and ordered predictably (alphabetical or by frequency). Avoid duplicating values with different labels.",
    "Use clear placeholders. Show a short prompt when no value is selected (e.g., ‘Choose one’). Don’t use real values as placeholders.",
    "Keyboard & typeahead. Ensure focus and Arrow keys navigate options; enable first‑letter search for long lists.",
    "Avoid deep nesting. If options have complex structure or long descriptions, consider a dedicated picker UI instead of Select.",
    "Multiple selections. Prefer `MetroSelect` with visible chips when the number of selections should be immediately clear.",
    "Performance. For very long lists, consider server‑side filtering or virtualized menus; keep menu height bounded.",
    "Presets/tokens. Style via theme tokens and `preset` to maintain consistent control density and colours.",
    "A11y. Ensure the trigger is labelled (via `label` or surrounding `FormControl`) and that the selected value is announced clearly."
  ],
  "examples": [],
  "sourceFiles": [
    "src/components/fields/Select.tsx"
  ],
  "version": "0.31.1",
  "schemaVersion": "1.6"
}